
ACX_Grad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000564  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000815  00800220  00800220  00000618  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000688  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ca  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0b  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a36  00000000  00000000  00002c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000701  00000000  00000000  0000381c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000679  00000000  00000000  00003f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004596  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	18 c2       	rjmp	.+1072   	; 0x476 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e6       	ldi	r30, 0x64	; 100
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 33       	cpi	r26, 0x35	; 53
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0a d2       	rcall	.+1044   	; 0x534 <main>
 120:	1f c2       	rjmp	.+1086   	; 0x560 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
;------------------------------------------------------------------------
; Save thread context
;-------------------------------------------------------------------------

    ; Save registers for calling thread
	push r1 //Just in case
 124:	1f 92       	push	r1
	push r2 // Save and restore callee-save registers
 126:	2f 92       	push	r2
	push r3 // Push onto calling thread's stack
 128:	3f 92       	push	r3
	push r4
 12a:	4f 92       	push	r4
	push r5
 12c:	5f 92       	push	r5
	push r6
 12e:	6f 92       	push	r6
	push r7
 130:	7f 92       	push	r7
	push r8
 132:	8f 92       	push	r8
	push r9
 134:	9f 92       	push	r9
	push r10
 136:	af 92       	push	r10
	push r11
 138:	bf 92       	push	r11
	push r12
 13a:	cf 92       	push	r12
	push r13
 13c:	df 92       	push	r13
	push r14
 13e:	ef 92       	push	r14
	push r15
 140:	ff 92       	push	r15
	push r16
 142:	0f 93       	push	r16
	push r17
 144:	1f 93       	push	r17
	push r28
 146:	cf 93       	push	r28
	push r29
 148:	df 93       	push	r29

	; save stack pointer in appropriate array location
    ;---------------------------
;	in r24, 

 	lds r30, x_thread_id        ; get stack ID
 14a:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__data_end>
 	ldi r31, 0
 14e:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30                     ; get stack control table offset
 150:	ee 0f       	add	r30, r30
 	rol r31
 152:	ff 1f       	adc	r31, r31
 	lsl r30
 154:	ee 0f       	add	r30, r30
 	rol r31
 156:	ff 1f       	adc	r31, r31
 	sbci r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 158:	e0 40       	sbci	r30, 0x00	; 0
 	sbci r31, hi8(-(stackControlTable))
 15a:	fe 4f       	sbci	r31, 0xFE	; 254

	in	r24, __SP_L__			; Put SP in r24-25
 15c:	8d b7       	in	r24, 0x3d	; 61
	in	r25, __SP_H__
 15e:	9e b7       	in	r25, 0x3e	; 62

	st	Z+,	r24					; *Z = SP 
 160:	81 93       	st	Z+, r24
	st	Z , r25
 162:	90 83       	st	Z, r25

	; Check for stack overflows
    ;---------------------------
 	
 	; int * Z = mem
	ldi r30, lo8(mem)           ; Init Z pointer to &mem
 164:	e3 e2       	ldi	r30, 0x23	; 35
 	ldi r31, hi8(mem)
 166:	f2 e0       	ldi	r31, 0x02	; 2

 	; threadID * stacksize for canary
	; int offset = x_thread_id * 256
	ldi r24, 0
 168:	80 e0       	ldi	r24, 0x00	; 0
	lds r25,	x_thread_id
 16a:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__data_end>

	add r31,	r25;
 16e:	f9 0f       	add	r31, r25
	ld	r24,	Z
 170:	80 81       	ld	r24, Z

	cpi	r24,	0xAA
 172:	8a 3a       	cpi	r24, 0xAA	; 170
	breq noSOF
 174:	09 f0       	breq	.+2      	; 0x178 <x_schedule>

00000176 <SOF>:
SOF:
	; Execute if there is a stack overflow
	call x_stack_overflow
 176:	f8 d0       	rcall	.+496    	; 0x368 <x_stack_overflow>

00000178 <x_schedule>:
		.global	x_schedule
x_schedule:

	; Determine next thread to run
    ;---------------------------
	lds r18, x_thread_id
 178:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <__data_end>
	
	lds r19, disable
 17c:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <disable>
	lds r20, suspend
 180:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <suspend>
	lds r21, delay
 184:	50 91 23 0a 	lds	r21, 0x0A23	; 0x800a23 <delay>

	or r21, r20
 188:	54 2b       	or	r21, r20
	or r21, r19
 18a:	53 2b       	or	r21, r19

0000018c <scan_begin>:

scan_begin:
	subi r18, -1			; get next thhread
 18c:	2f 5f       	subi	r18, 0xFF	; 255
	andi r18, 0x07			; mod by numthreads
 18e:	27 70       	andi	r18, 0x07	; 7

	mov r24, r18
	call bit2mask8			; get mask of bit (thread_id + 1) % numthreads
 190:	82 2f       	mov	r24, r18
 192:	27 d0       	rcall	.+78     	; 0x1e2 <bit2mask8>

	and r21, r24
 194:	58 23       	and	r21, r24
	cp r21, r24
 196:	58 17       	cp	r21, r24

	breq scan_begin
 198:	c9 f3       	breq	.-14     	; 0x18c <scan_begin>


	; Retrieve next stack pointer for next thread
    ;---------------------------
	sts x_thread_id, r18
 19a:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <__data_end>
	mov r30, r18        ; get stack ID
 19e:	e2 2f       	mov	r30, r18
 	ldi r31, 0
 1a0:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30             ; get stack control table offset
 1a2:	ee 0f       	add	r30, r30
 	rol r31
 1a4:	ff 1f       	adc	r31, r31
 	lsl r30
 1a6:	ee 0f       	add	r30, r30
 	rol r31
 1a8:	ff 1f       	adc	r31, r31
 	sbci r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 1aa:	e0 40       	sbci	r30, 0x00	; 0
 	sbci r31, hi8(-(stackControlTable))
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254

	ld	r24, Z+					
 1ae:	81 91       	ld	r24, Z+
	ld	r25, Z
 1b0:	90 81       	ld	r25, Z

    ; restore new thread's stack pointer
    ;---------------------------
    cli             ; begin stack pointer change		
 1b2:	f8 94       	cli
	out __SP_L__, r24
 1b4:	8d bf       	out	0x3d, r24	; 61
	out __SP_H__, r25
 1b6:	9e bf       	out	0x3e, r25	; 62
    sei             ; end  stack pointer change
 1b8:	78 94       	sei

000001ba <restore>:
;---------------------------------------------------
restore:
 	
    ; restore new thread's registers 
    ;---------------------------
	pop r29
 1ba:	df 91       	pop	r29
	pop r28
 1bc:	cf 91       	pop	r28
	pop r17
 1be:	1f 91       	pop	r17
	pop r16
 1c0:	0f 91       	pop	r16
	pop r15
 1c2:	ff 90       	pop	r15
	pop r14
 1c4:	ef 90       	pop	r14
	pop r13
 1c6:	df 90       	pop	r13
	pop r12
 1c8:	cf 90       	pop	r12
	pop r11
 1ca:	bf 90       	pop	r11
	pop r10
 1cc:	af 90       	pop	r10
	pop r9
 1ce:	9f 90       	pop	r9
	pop r8
 1d0:	8f 90       	pop	r8
	pop r7
 1d2:	7f 90       	pop	r7
	pop r6
 1d4:	6f 90       	pop	r6
	pop r5
 1d6:	5f 90       	pop	r5
	pop r4
 1d8:	4f 90       	pop	r4
	pop r3
 1da:	3f 90       	pop	r3
	pop r2
 1dc:	2f 90       	pop	r2
	pop r1
 1de:	1f 90       	pop	r1

	ret
 1e0:	08 95       	ret

000001e2 <bit2mask8>:
//-----------------------------------------------------------------------------------------------

		.global bit2mask8
bit2mask8:
		;r24 contains thread ID input
 		subi r24, -1
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
		ldi r25, 1
 1e4:	91 e0       	ldi	r25, 0x01	; 1

000001e6 <again>:
again:

		dec r24
 1e6:	8a 95       	dec	r24
		cpi r24, 1
 1e8:	81 30       	cpi	r24, 0x01	; 1
		brlo done
		lsl r25
 1ea:	10 f0       	brcs	.+4      	; 0x1f0 <done>
		jmp again
 1ec:	99 0f       	add	r25, r25
 1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <again>

000001f0 <done>:

done:	mov r24, r25
 1f0:	89 2f       	mov	r24, r25
		ldi r25, 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
		ret
 1f4:	08 95       	ret

000001f6 <kernalInit>:
void x_enable(uint8_t ID) {
	cli();

	// Your initialization code here
	disable &= ~bit2mask8(ID);
	sei();
 1f6:	8e ef       	ldi	r24, 0xFE	; 254
 1f8:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <disable>
 1fc:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <suspend>
 200:	10 92 23 0a 	sts	0x0A23, r1	; 0x800a23 <delay>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	ec 5d       	subi	r30, 0xDC	; 220
 210:	f5 4f       	sbci	r31, 0xF5	; 245
 212:	11 82       	std	Z+1, r1	; 0x01
 214:	10 82       	st	Z, r1
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	88 30       	cpi	r24, 0x08	; 8
 21a:	91 05       	cpc	r25, r1
 21c:	a9 f7       	brne	.-22     	; 0x208 <kernalInit+0x12>
 21e:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__data_end>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 34 0a 	sts	0x0A34, r24	; 0x800a34 <x_thread_mask>
 228:	08 95       	ret

0000022a <placeCanaries>:
 22a:	8a ea       	ldi	r24, 0xAA	; 170
 22c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <mem>
 230:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <mem+0x100>
 234:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <mem+0x200>
 238:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <mem+0x300>
 23c:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <mem+0x400>
 240:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <mem+0x500>
 244:	80 93 23 08 	sts	0x0823, r24	; 0x800823 <mem+0x600>
 248:	80 93 23 09 	sts	0x0923, r24	; 0x800923 <mem+0x700>
 24c:	08 95       	ret

0000024e <x_init>:
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	00 d0       	rcall	.+0      	; 0x258 <x_init+0xa>
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	0d b7       	in	r16, 0x3d	; 61
 25e:	1e b7       	in	r17, 0x3e	; 62
 260:	f8 94       	cli
 262:	c9 df       	rcall	.-110    	; 0x1f6 <kernalInit>
 264:	e2 df       	rcall	.-60     	; 0x22a <placeCanaries>
 266:	f8 01       	movw	r30, r16
 268:	82 85       	ldd	r24, Z+10	; 0x0a
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	81 85       	ldd	r24, Z+9	; 0x09
 26e:	8a 83       	std	Y+2, r24	; 0x02
 270:	80 85       	ldd	r24, Z+8	; 0x08
 272:	8b 83       	std	Y+3, r24	; 0x03
 274:	82 e2       	ldi	r24, 0x22	; 34
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	9e bf       	out	0x3e, r25	; 62
 27a:	8d bf       	out	0x3d, r24	; 61
 27c:	ed b7       	in	r30, 0x3d	; 61
 27e:	fe b7       	in	r31, 0x3e	; 62
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	80 83       	st	Z, r24
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	df 01       	movw	r26, r30
 288:	11 97       	sbiw	r26, 0x01	; 1
 28a:	8c 93       	st	X, r24
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	32 97       	sbiw	r30, 0x02	; 2
 290:	80 83       	st	Z, r24
 292:	8d b7       	in	r24, 0x3d	; 61
 294:	9e b7       	in	r25, 0x3e	; 62
 296:	0a 97       	sbiw	r24, 0x0a	; 10
 298:	9e bf       	out	0x3e, r25	; 62
 29a:	8d bf       	out	0x3d, r24	; 61
 29c:	78 94       	sei
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <x_delay>:
 2ae:	9c 01       	movw	r18, r24
 2b0:	f8 94       	cli
 2b2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
 2b6:	e8 2f       	mov	r30, r24
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	ec 5d       	subi	r30, 0xDC	; 220
 2c0:	f5 4f       	sbci	r31, 0xF5	; 245
 2c2:	31 83       	std	Z+1, r19	; 0x01
 2c4:	20 83       	st	Z, r18
 2c6:	8d df       	rcall	.-230    	; 0x1e2 <bit2mask8>
 2c8:	90 91 23 0a 	lds	r25, 0x0A23	; 0x800a23 <delay>
 2cc:	89 2b       	or	r24, r25
 2ce:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <delay>
 2d2:	28 df       	rcall	.-432    	; 0x124 <x_yield>
 2d4:	78 94       	sei
 2d6:	08 95       	ret

000002d8 <x_new>:
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <x_new+0xa>
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	f8 94       	cli
 2e8:	1b 82       	std	Y+3, r1	; 0x03
 2ea:	1a 82       	std	Y+2, r1	; 0x02
 2ec:	19 82       	std	Y+1, r1	; 0x01
 2ee:	7a 83       	std	Y+2, r23	; 0x02
 2f0:	69 83       	std	Y+1, r22	; 0x01
 2f2:	e8 2f       	mov	r30, r24
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	8f 01       	movw	r16, r30
 300:	00 50       	subi	r16, 0x00	; 0
 302:	1e 4f       	sbci	r17, 0xFE	; 254
 304:	f8 01       	movw	r30, r16
 306:	22 81       	ldd	r18, Z+2	; 0x02
 308:	33 81       	ldd	r19, Z+3	; 0x03
 30a:	99 81       	ldd	r25, Y+1	; 0x01
 30c:	d9 01       	movw	r26, r18
 30e:	9c 93       	st	X, r25
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	b9 01       	movw	r22, r18
 314:	61 50       	subi	r22, 0x01	; 1
 316:	71 09       	sbc	r23, r1
 318:	fb 01       	movw	r30, r22
 31a:	90 83       	st	Z, r25
 31c:	9b 81       	ldd	r25, Y+3	; 0x03
 31e:	12 97       	sbiw	r26, 0x02	; 2
 320:	9c 93       	st	X, r25
 322:	26 51       	subi	r18, 0x16	; 22
 324:	31 09       	sbc	r19, r1
 326:	f8 01       	movw	r30, r16
 328:	31 83       	std	Z+1, r19	; 0x01
 32a:	20 83       	st	Z, r18
 32c:	24 2f       	mov	r18, r20
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	b9 01       	movw	r22, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <x_new+0x60>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	8a 95       	dec	r24
 33a:	e2 f7       	brpl	.-8      	; 0x334 <x_new+0x5c>
 33c:	cb 01       	movw	r24, r22
 33e:	44 23       	and	r20, r20
 340:	29 f0       	breq	.+10     	; 0x34c <x_new+0x74>
 342:	80 95       	com	r24
 344:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <disable>
 348:	89 23       	and	r24, r25
 34a:	03 c0       	rjmp	.+6      	; 0x352 <x_new+0x7a>
 34c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <disable>
 350:	89 2b       	or	r24, r25
 352:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <disable>
 356:	78 94       	sei
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <x_stack_overflow>:
	// return to caller.
}

// called from X_yield if the canary is malformed
void x_stack_overflow(void) {
	DDRB |= 0x80;
 368:	27 9a       	sbi	0x04, 7	; 4

	// return to caller.
}

// called from X_yield if the canary is malformed
void x_stack_overflow(void) {
 36a:	23 e0       	ldi	r18, 0x03	; 3
 36c:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	4f ef       	ldi	r20, 0xFF	; 255
 370:	81 ee       	ldi	r24, 0xE1	; 225
 372:	94 e0       	ldi	r25, 0x04	; 4
 374:	41 50       	subi	r20, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <x_stack_overflow+0xc>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <x_stack_overflow+0x16>
 37e:	00 00       	nop
	DDRB |= 0x80;
	while (1) {
		for (int i = 0; i < 3; i++) {
			_delay_ms(100);
			PORTB |= 0x80;
 380:	2f 9a       	sbi	0x05, 7	; 5
 382:	4f ef       	ldi	r20, 0xFF	; 255
 384:	81 ee       	ldi	r24, 0xE1	; 225
 386:	94 e0       	ldi	r25, 0x04	; 4
 388:	41 50       	subi	r20, 0x01	; 1
 38a:	80 40       	sbci	r24, 0x00	; 0
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <x_stack_overflow+0x20>
 390:	00 c0       	rjmp	.+0      	; 0x392 <x_stack_overflow+0x2a>
 392:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 0x80;
 394:	85 b1       	in	r24, 0x05	; 5
 396:	80 58       	subi	r24, 0x80	; 128
 398:	85 b9       	out	0x05, r24	; 5
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	31 09       	sbc	r19, r1

// called from X_yield if the canary is malformed
void x_stack_overflow(void) {
	DDRB |= 0x80;
	while (1) {
		for (int i = 0; i < 3; i++) {
 39e:	39 f7       	brne	.-50     	; 0x36e <x_stack_overflow+0x6>
 3a0:	23 e0       	ldi	r18, 0x03	; 3
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	4f ef       	ldi	r20, 0xFF	; 255
 3a6:	85 ea       	ldi	r24, 0xA5	; 165
 3a8:	9e e0       	ldi	r25, 0x0E	; 14
 3aa:	41 50       	subi	r20, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <x_stack_overflow+0x42>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <x_stack_overflow+0x4c>
 3b4:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
			_delay_ms(300);
			PORTB |= 0x80;
 3b6:	2f 9a       	sbi	0x05, 7	; 5
 3b8:	4f ef       	ldi	r20, 0xFF	; 255
 3ba:	85 ea       	ldi	r24, 0xA5	; 165
 3bc:	9e e0       	ldi	r25, 0x0E	; 14
 3be:	41 50       	subi	r20, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <x_stack_overflow+0x56>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <x_stack_overflow+0x60>
 3c8:	00 00       	nop
			_delay_ms(300);
			PORTB ^= 0x80;
 3ca:	85 b1       	in	r24, 0x05	; 5
 3cc:	80 58       	subi	r24, 0x80	; 128
 3ce:	85 b9       	out	0x05, r24	; 5
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	31 09       	sbc	r19, r1
			_delay_ms(100);
			PORTB |= 0x80;
			_delay_ms(100);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
 3d4:	39 f7       	brne	.-50     	; 0x3a4 <x_stack_overflow+0x3c>
 3d6:	23 e0       	ldi	r18, 0x03	; 3
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	4f ef       	ldi	r20, 0xFF	; 255
 3dc:	81 ee       	ldi	r24, 0xE1	; 225
 3de:	94 e0       	ldi	r25, 0x04	; 4
 3e0:	41 50       	subi	r20, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <x_stack_overflow+0x78>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <x_stack_overflow+0x82>
 3ea:	00 00       	nop
			_delay_ms(300);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
			_delay_ms(100);
			PORTB |= 0x80;
 3ec:	2f 9a       	sbi	0x05, 7	; 5
 3ee:	4f ef       	ldi	r20, 0xFF	; 255
 3f0:	81 ee       	ldi	r24, 0xE1	; 225
 3f2:	94 e0       	ldi	r25, 0x04	; 4
 3f4:	41 50       	subi	r20, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <x_stack_overflow+0x8c>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <x_stack_overflow+0x96>
 3fe:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 0x80;
 400:	85 b1       	in	r24, 0x05	; 5
 402:	80 58       	subi	r24, 0x80	; 128
 404:	85 b9       	out	0x05, r24	; 5
 406:	21 50       	subi	r18, 0x01	; 1
 408:	31 09       	sbc	r19, r1
			_delay_ms(300);
			PORTB |= 0x80;
			_delay_ms(300);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
 40a:	39 f7       	brne	.-50     	; 0x3da <x_stack_overflow+0x72>
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	45 ea       	ldi	r20, 0xA5	; 165
 410:	8e e0       	ldi	r24, 0x0E	; 14
 412:	21 50       	subi	r18, 0x01	; 1
 414:	40 40       	sbci	r20, 0x00	; 0
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	a5 cf       	rjmp	.-182    	; 0x36a <x_stack_overflow+0x2>

00000420 <setTimer>:
		_delay_ms(300);
	}
}

void setTimer() {
	PRR0 = 0x00;
 420:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
	TCNT1 = 0;
 424:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 428:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

	// period 333.33 ms @ 16144, on-time = 75 ms @ 4688
	int TOP1 = 63; // OFFTIME - 1 ms
	int TOP2 = 63;//63;// ONTIME - 1 ms

	cli();
 42c:	f8 94       	cli
	TCCR1A = 0x00;
 42e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0x00;
 432:	e1 e8       	ldi	r30, 0x81	; 129
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	10 82       	st	Z, r1
	//TCCR0A = 0x02; //Sets CTC mode of operation?

	// configure match register
	ICR1 = TOP1;
 438:	8f e3       	ldi	r24, 0x3F	; 63
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 440:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1A = TOP2;    // 75 msec
 444:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 448:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	TCCR1B = 0x04;   // clk/256 from prescaler
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	80 83       	st	Z, r24

	// turn on CTC mode:
	TCCR1B |= (1 << WGM12);
 450:	80 81       	ld	r24, Z
 452:	88 60       	ori	r24, 0x08	; 8
 454:	80 83       	st	Z, r24

	// Set CS10 and CS12 bits for 1024 prescaler:
	TCCR1B |= (1 << CS10);
 456:	80 81       	ld	r24, Z
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12);
 45c:	80 81       	ld	r24, Z
 45e:	84 60       	ori	r24, 0x04	; 4
 460:	80 83       	st	Z, r24

	// enable timer compare interrupt:
	TIMSK1 |= (1 << OCIE1A);
 462:	ef e6       	ldi	r30, 0x6F	; 111
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	80 83       	st	Z, r24
	sei();          // enable global interrupts
 46c:	78 94       	sei

	// setup initial output state
	DDRB = 0x80;
 46e:	80 e8       	ldi	r24, 0x80	; 128
 470:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x80;
 472:	2f 9a       	sbi	0x05, 7	; 5
 474:	08 95       	ret

00000476 <__vector_17>:
}

ISR(TIMER1_COMPA_vect){
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	0b b6       	in	r0, 0x3b	; 59
 482:	0f 92       	push	r0
 484:	1f 93       	push	r17
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
	//decrement x_thread_id's timer	
	//ATOMIC_BLOCK; // Need to unblock somehow afterwards?
	
	//check x_delay_thread for every thread
	for(int i = 0; i < MAXTHREADS; i++) {
 4a2:	c0 e0       	ldi	r28, 0x00	; 0
 4a4:	d0 e0       	ldi	r29, 0x00	; 0
		// check if thread is currently delayed
		int delayStatus = bit2mask8(i) & delay; 
 4a6:	8c 2f       	mov	r24, r28
 4a8:	9c de       	rcall	.-712    	; 0x1e2 <bit2mask8>
		
		//if the delay status is not zero and the count isn't zero
		if (x_thread_delay[i] && delayStatus) { 
 4aa:	fe 01       	movw	r30, r28
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	ec 5d       	subi	r30, 0xDC	; 220
 4b2:	f5 4f       	sbci	r31, 0xF5	; 245
 4b4:	20 81       	ld	r18, Z
 4b6:	31 81       	ldd	r19, Z+1	; 0x01
 4b8:	23 2b       	or	r18, r19
 4ba:	d1 f0       	breq	.+52     	; 0x4f0 <__vector_17+0x7a>
 4bc:	90 91 23 0a 	lds	r25, 0x0A23	; 0x800a23 <delay>
 4c0:	89 23       	and	r24, r25
 4c2:	b1 f0       	breq	.+44     	; 0x4f0 <__vector_17+0x7a>
			
			// decrement count
			x_thread_delay[i]--;
 4c4:	fe 01       	movw	r30, r28
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	ec 5d       	subi	r30, 0xDC	; 220
 4cc:	f5 4f       	sbci	r31, 0xF5	; 245
 4ce:	80 81       	ld	r24, Z
 4d0:	91 81       	ldd	r25, Z+1	; 0x01
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	91 83       	std	Z+1, r25	; 0x01
 4d6:	80 83       	st	Z, r24
			
			//if counter is now zero then clear delay bit
			if (!x_thread_delay[i])
 4d8:	80 81       	ld	r24, Z
 4da:	91 81       	ldd	r25, Z+1	; 0x01
 4dc:	89 2b       	or	r24, r25
 4de:	41 f4       	brne	.+16     	; 0x4f0 <__vector_17+0x7a>
				delay &= ~(bit2mask8(i));
 4e0:	8c 2f       	mov	r24, r28
 4e2:	7f de       	rcall	.-770    	; 0x1e2 <bit2mask8>
 4e4:	80 95       	com	r24
 4e6:	90 91 23 0a 	lds	r25, 0x0A23	; 0x800a23 <delay>
 4ea:	89 23       	and	r24, r25
 4ec:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <delay>
ISR(TIMER1_COMPA_vect){
	//decrement x_thread_id's timer	
	//ATOMIC_BLOCK; // Need to unblock somehow afterwards?
	
	//check x_delay_thread for every thread
	for(int i = 0; i < MAXTHREADS; i++) {
 4f0:	21 96       	adiw	r28, 0x01	; 1
 4f2:	c8 30       	cpi	r28, 0x08	; 8
 4f4:	d1 05       	cpc	r29, r1
 4f6:	b9 f6       	brne	.-82     	; 0x4a6 <__vector_17+0x30>
			//if counter is now zero then clear delay bit
			if (!x_thread_delay[i])
				delay &= ~(bit2mask8(i));
		}
	}
}
 4f8:	ff 91       	pop	r31
 4fa:	ef 91       	pop	r30
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	bf 91       	pop	r27
 502:	af 91       	pop	r26
 504:	9f 91       	pop	r25
 506:	8f 91       	pop	r24
 508:	7f 91       	pop	r23
 50a:	6f 91       	pop	r22
 50c:	5f 91       	pop	r21
 50e:	4f 91       	pop	r20
 510:	3f 91       	pop	r19
 512:	2f 91       	pop	r18
 514:	1f 91       	pop	r17
 516:	0f 90       	pop	r0
 518:	0b be       	out	0x3b, r0	; 59
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <thread0Blink>:
{
   while(1){
	 //PORTF &= 0x80;
	 //PORTF |= (shiftCounter++) % 3;
	 //PORTF ^= 1 << 0;
     x_delay(500);
 524:	84 ef       	ldi	r24, 0xF4	; 244
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	c2 de       	rcall	.-636    	; 0x2ae <x_delay>
 52a:	fc cf       	rjmp	.-8      	; 0x524 <thread0Blink>

0000052c <thread1Blink>:

void thread1Blink(void) {
	while(1) {
	  //PORTF &= 0x80;
	  //PORTF ^= 1 << 1;
	  x_delay(500);
 52c:	84 ef       	ldi	r24, 0xF4	; 244
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	be de       	rcall	.-644    	; 0x2ae <x_delay>
 532:	fc cf       	rjmp	.-8      	; 0x52c <thread1Blink>

00000534 <main>:

int shiftCounter = 0;

int main(void)
{
   DDRB = 0x80;
 534:	80 e8       	ldi	r24, 0x80	; 128
 536:	84 b9       	out	0x04, r24	; 4
   PORTB |= 0x80;
 538:	2f 9a       	sbi	0x05, 7	; 5
   DDRF |= (1<<DDF1)|(1<<DDF0);
 53a:	80 b3       	in	r24, 0x10	; 16
 53c:	83 60       	ori	r24, 0x03	; 3
 53e:	80 bb       	out	0x10, r24	; 16
   PORTF |= 0x03;
 540:	81 b3       	in	r24, 0x11	; 17
 542:	83 60       	ori	r24, 0x03	; 3
 544:	81 bb       	out	0x11, r24	; 17
   x_init();
 546:	83 de       	rcall	.-762    	; 0x24e <x_init>
   setTimer();
 548:	6b df       	rcall	.-298    	; 0x420 <setTimer>
 54a:	41 e0       	ldi	r20, 0x01	; 1
   x_new(0, thread0Blink, true); 
 54c:	62 e9       	ldi	r22, 0x92	; 146
 54e:	72 e0       	ldi	r23, 0x02	; 2
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	c2 de       	rcall	.-636    	; 0x2d8 <x_new>
 554:	41 e0       	ldi	r20, 0x01	; 1
   x_new(1, thread1Blink, true);  
 556:	66 e9       	ldi	r22, 0x96	; 150
 558:	72 e0       	ldi	r23, 0x02	; 2
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	bd de       	rcall	.-646    	; 0x2d8 <x_new>
 55e:	ff cf       	rjmp	.-2      	; 0x55e <main+0x2a>

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>

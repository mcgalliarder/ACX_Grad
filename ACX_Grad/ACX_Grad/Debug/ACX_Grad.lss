
ACX_Grad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0000022a  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001005  00800220  00800220  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000350  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107c  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d15  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b5  00000000  00000000  00002189  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00002840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062a  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000014  00000000  00000000  00002f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e2       	ldi	r30, 0x2A	; 42
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e1       	ldi	r18, 0x12	; 18
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 32       	cpi	r26, 0x25	; 37
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	7f d0       	rcall	.+254    	; 0x21e <main>
 120:	82 c0       	rjmp	.+260    	; 0x226 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
;------------------------------------------------------------------------
; Save thread context
;-------------------------------------------------------------------------

    ; Save registers for calling thread
	push r2 // Save and restore callee-save registers
 124:	2f 92       	push	r2
	push r3 // Push onto calling thread's stack
 126:	3f 92       	push	r3
	push r4
 128:	4f 92       	push	r4
	push r5
 12a:	5f 92       	push	r5
	push r6
 12c:	6f 92       	push	r6
	push r7
 12e:	7f 92       	push	r7
	push r8
 130:	8f 92       	push	r8
	push r9
 132:	9f 92       	push	r9
	push r10
 134:	af 92       	push	r10
	push r11
 136:	bf 92       	push	r11
	push r12
 138:	cf 92       	push	r12
	push r13
 13a:	df 92       	push	r13
	push r14
 13c:	ef 92       	push	r14
	push r15
 13e:	ff 92       	push	r15
	push r16
 140:	0f 93       	push	r16
	push r17
 142:	1f 93       	push	r17

	; save stack pointer in appropriate array location
    ;---------------------------
;	in r24, 

 	lds r30, x_thread_id        ; get stack ID
 144:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__data_end>
 	ldi r31, 0
 148:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30                     ; get stack control table offset
 14a:	ee 0f       	add	r30, r30
 	rol r31
 14c:	ff 1f       	adc	r31, r31
 	lsl r30
 14e:	ee 0f       	add	r30, r30
 	rol r31
 150:	ff 1f       	adc	r31, r31
 	subi r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 152:	e0 50       	subi	r30, 0x00	; 0
 	subi r31, hi8(-(stackControlTable))
 154:	fe 5f       	subi	r31, 0xFE	; 254

	in	r24, __SP_L__			; Put SP in r24-25
 156:	8e b7       	in	r24, 0x3e	; 62
	in	r25, __SP_H__
 158:	9d b7       	in	r25, 0x3d	; 61

	st	Z+,	r24					; *Z = SP 
 15a:	81 93       	st	Z+, r24
	st	Z , r25
 15c:	90 83       	st	Z, r25

	; Check for stack overflows
    ;---------------------------
 	
 	; int * Z = mem
	ldi r30, lo8(mem)           ; Init Z pointer to &mem
 15e:	e3 e2       	ldi	r30, 0x23	; 35
 	ldi r31, hi8(mem)
 160:	fa e0       	ldi	r31, 0x0A	; 10

	; int offset = x_thread_id * 256
	ldi r24, 0
 162:	80 e0       	ldi	r24, 0x00	; 0
	lds r25,	x_thread_id
 164:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__data_end>

	add r31,	r25;
 168:	f9 0f       	add	r31, r25
	ld	r24,	Z
 16a:	80 81       	ld	r24, Z

	cpi	r24,	0xAA
 16c:	8a 3a       	cpi	r24, 0xAA	; 170
	breq noSOF
 16e:	11 f0       	breq	.+4      	; 0x174 <noSOF>

00000170 <SOF>:
SOF:
	; Execute if there is a stack overflow
	ldi r24,	0xAA
 170:	8a ea       	ldi	r24, 0xAA	; 170
	st	Z,		r24	; replace mutated canary
 172:	80 83       	st	Z, r24

00000174 <noSOF>:
	; Retrieve next stack pointer for next thread
    ;---------------------------

    ; restore new thread's stack pointer
    ;---------------------------
    cli             ; begin stack pointer change
 174:	f8 94       	cli
        ; do stack pointer change here
    sei             ; end  stack pointer change
 176:	78 94       	sei


    ; restore new thread's registers 
    ;---------------------------
	pop r17
 178:	1f 91       	pop	r17
	pop r16
 17a:	0f 91       	pop	r16
	pop r15
 17c:	ff 90       	pop	r15
	pop r14
 17e:	ef 90       	pop	r14
	pop r13
 180:	df 90       	pop	r13
	pop r12
 182:	cf 90       	pop	r12
	pop r11
 184:	bf 90       	pop	r11
	pop r10
 186:	af 90       	pop	r10
	pop r9
 188:	9f 90       	pop	r9
	pop r8
 18a:	8f 90       	pop	r8
	pop r7
 18c:	7f 90       	pop	r7
	pop r6
 18e:	6f 90       	pop	r6
	pop r5
 190:	5f 90       	pop	r5
	pop r4
 192:	4f 90       	pop	r4
	pop r3
 194:	3f 90       	pop	r3
	pop r2
 196:	2f 90       	pop	r2

	ret
 198:	08 95       	ret

0000019a <x_schedule>:

; your code here


	// Return to next thread
		ret
 19a:	08 95       	ret

0000019c <bit2mask8>:

		.global bit2mask8
bit2mask8:

		;r24 contains thread ID input
		cpi r24, 1
 19c:	81 30       	cpi	r24, 0x01	; 1
		brlo none
 19e:	48 f0       	brcs	.+18     	; 0x1b2 <none>
		cp 8, r24
		brge none

		ldi r25, 1
		*/
 		adc r24, 1
 1a0:	81 1d       	adc	r24, r1

000001a2 <again>:
again:

		dec r24
 1a2:	8a 95       	dec	r24
		cpi r24, 1
 1a4:	81 30       	cpi	r24, 0x01	; 1
		brlo done
 1a6:	10 f0       	brcs	.+4      	; 0x1ac <done>
		lsl r25
 1a8:	99 0f       	add	r25, r25
		jmp again
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <again>

000001ac <done>:

done:	mov r24, r25
 1ac:	89 2f       	mov	r24, r25
		ldi r25, 0
		jmp finished
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <finished>

000001b2 <none>:

none:
		ldi r25, 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
		ldi r24, 0	
 1b4:	80 e0       	ldi	r24, 0x00	; 0

000001b6 <finished>:
finished:
		ret
 1b6:	08 95       	ret

000001b8 <kernalInit>:

//---------------------------------------------------
// Initialize all kernal state variables
//---------------------------------------------------
void kernalInit(void) {
    disable = 0xFE;
 1b8:	8e ef       	ldi	r24, 0xFE	; 254
 1ba:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <disable>
    suspend = 0x00;
 1be:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <suspend>
    delay = 0x00;
 1c2:	10 92 23 12 	sts	0x1223, r1	; 0x801223 <delay>
 1c6:	e1 e2       	ldi	r30, 0x21	; 33
 1c8:	f2 e0       	ldi	r31, 0x02	; 2
 1ca:	81 e3       	ldi	r24, 0x31	; 49
 1cc:	92 e0       	ldi	r25, 0x02	; 2

    for (int i = 0; i < MAXTHREADS; i++)
        // no delays
        delayCounters[i] = 0; 
 1ce:	11 92       	st	Z+, r1
 1d0:	11 92       	st	Z+, r1
void kernalInit(void) {
    disable = 0xFE;
    suspend = 0x00;
    delay = 0x00;

    for (int i = 0; i < MAXTHREADS; i++)
 1d2:	e8 17       	cp	r30, r24
 1d4:	f9 07       	cpc	r31, r25
 1d6:	d9 f7       	brne	.-10     	; 0x1ce <kernalInit+0x16>
        // no delays
        delayCounters[i] = 0; 

    x_thread_id = 0; // current thread
 1d8:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__data_end>
    x_thread_mask = 0x01;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 24 12 	sts	0x1224, r24	; 0x801224 <x_thread_mask>
 1e2:	08 95       	ret

000001e4 <placeCanaries>:

//---------------------------------------------------
// Stack Control
//---------------------------------------------------
void placeCanaries(void) {
    mem[T0_CANARY_OFFS] = CANARY;
 1e4:	8a ea       	ldi	r24, 0xAA	; 170
 1e6:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <mem>
    mem[T1_CANARY_OFFS] = CANARY;
 1ea:	80 93 23 0b 	sts	0x0B23, r24	; 0x800b23 <mem+0x100>
    mem[T2_CANARY_OFFS] = CANARY;
 1ee:	80 93 23 0c 	sts	0x0C23, r24	; 0x800c23 <mem+0x200>
    mem[T3_CANARY_OFFS] = CANARY;
 1f2:	80 93 23 0d 	sts	0x0D23, r24	; 0x800d23 <mem+0x300>
    mem[T4_CANARY_OFFS] = CANARY;
 1f6:	80 93 23 0e 	sts	0x0E23, r24	; 0x800e23 <mem+0x400>
    mem[T5_CANARY_OFFS] = CANARY;
 1fa:	80 93 23 0f 	sts	0x0F23, r24	; 0x800f23 <mem+0x500>
    mem[T6_CANARY_OFFS] = CANARY;
 1fe:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <mem+0x600>
    mem[T7_CANARY_OFFS] = CANARY;
 202:	80 93 23 11 	sts	0x1123, r24	; 0x801123 <mem+0x700>
 206:	08 95       	ret

00000208 <x_init>:
// void x_yield(void)
// void x_schedule(void)

void x_init(void)
{
	asm("cli");
 208:	f8 94       	cli

    // initialize kernal data structures
    kernalInit();
 20a:	d6 df       	rcall	.-84     	; 0x1b8 <kernalInit>
    // place canary values
    placeCanaries();
 20c:	eb df       	rcall	.-42     	; 0x1e4 <placeCanaries>
 20e:	8d b7       	in	r24, 0x3d	; 61

    // Save the stack pointer as a byte pointer
    byte * stackP = (byte *) SP;
 210:	9e b7       	in	r25, 0x3e	; 62
 212:	82 e2       	ldi	r24, 0x22	; 34
    ret.addr[0] = * (stackP - 1);
    ret.addr[1] = * (stackP - 2);
    ret.addr[2] = * (stackP - 3);

    // change the stack pointer to the bottom of T0
    SP = (int) (mem + T0_STACK_BASE_OFFS);
 214:	9b e0       	ldi	r25, 0x0B	; 11
 216:	9e bf       	out	0x3e, r25	; 62
 218:	8d bf       	out	0x3d, r24	; 61
 21a:	78 94       	sei
    // push the old return address onto the new stack
    asm("push %0" : "=r" (ret.addr[2]));
    asm("push %0" : "=r" (ret.addr[1]));
    asm("push %0" : "=r" (ret.addr[0]));

	asm("sei");
 21c:	08 95       	ret

0000021e <main>:
#include "PSerial.h"
#include "acx.h"

int main(void)
{
    DDRB |= 0x80;
 21e:	27 9a       	sbi	0x04, 7	; 4

    //PSerial_open(0, BAUD115200, SERIAL_8N1);

	x_init();
 220:	f3 df       	rcall	.-26     	; 0x208 <x_init>
	
    while (1) {
		

		x_yield();
 222:	80 df       	rcall	.-256    	; 0x124 <x_yield>
 224:	fe cf       	rjmp	.-4      	; 0x222 <main+0x4>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>

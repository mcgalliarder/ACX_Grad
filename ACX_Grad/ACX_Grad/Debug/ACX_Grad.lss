
ACX_Grad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  000002ba  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001005  00800220  00800220  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000003e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f4  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e99  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000add  00000000  00000000  0000276d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000723  00000000  00000000  000033d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d2  00000000  00000000  00003afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000041cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea eb       	ldi	r30, 0xBA	; 186
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e1       	ldi	r18, 0x12	; 18
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 32       	cpi	r26, 0x25	; 37
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	42 d0       	rcall	.+132    	; 0x1a4 <main>
 120:	ca c0       	rjmp	.+404    	; 0x2b6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
;------------------------------------------------------------------------
; Save thread context
;-------------------------------------------------------------------------

    ; Save registers for calling thread
	push r2 // Save and restore callee-save registers
 124:	2f 92       	push	r2
	push r3 // Push onto calling thread's stack
 126:	3f 92       	push	r3
	push r4
 128:	4f 92       	push	r4
	push r5
 12a:	5f 92       	push	r5
	push r6
 12c:	6f 92       	push	r6
	push r7
 12e:	7f 92       	push	r7
	push r8
 130:	8f 92       	push	r8
	push r9
 132:	9f 92       	push	r9
	push r10
 134:	af 92       	push	r10
	push r11
 136:	bf 92       	push	r11
	push r12
 138:	cf 92       	push	r12
	push r13
 13a:	df 92       	push	r13
	push r14
 13c:	ef 92       	push	r14
	push r15
 13e:	ff 92       	push	r15
	push r16
 140:	0f 93       	push	r16
	push r17
 142:	1f 93       	push	r17

	; save stack pointer in appropriate array location
    ;---------------------------
;	in r24, 

 	lds r30, x_thread_id        ; get stack ID
 144:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__data_end>
 	ldi r31, 0
 148:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30                     ; get stack control table offset
 14a:	ee 0f       	add	r30, r30
 	rol r31
 14c:	ff 1f       	adc	r31, r31
 	lsl r30
 14e:	ee 0f       	add	r30, r30
 	rol r31
 150:	ff 1f       	adc	r31, r31
 	subi r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 152:	e0 50       	subi	r30, 0x00	; 0
 	subi r31, hi8(-(stackControlTable))
 154:	fe 5f       	subi	r31, 0xFE	; 254

	in r24, __SP_L__
 156:	8e b7       	in	r24, 0x3e	; 62
	in r25, __SP_H__
 158:	9d b7       	in	r25, 0x3d	; 61

	st Z , r24
 15a:	80 83       	st	Z, r24
	; Check for stack overflows
    ;---------------------------


 	
 	ldi r30, lo8(mem)           ; Init Z pointer to &mem
 15c:	e3 e2       	ldi	r30, 0x23	; 35
 	ldi r31, hi8(mem)
 15e:	fa e0       	ldi	r31, 0x0A	; 10
	; Retrieve next stack pointer for next thread
    ;---------------------------

    ; restore new thread's stack pointer
    ;---------------------------
    cli             ; begin stack pointer change
 160:	f8 94       	cli
        ; do stack pointer change here
    sei             ; end  stack pointer change
 162:	78 94       	sei


    ; restore new thread's registers 
    ;---------------------------
	pop r17
 164:	1f 91       	pop	r17
	pop r16
 166:	0f 91       	pop	r16
	pop r15
 168:	ff 90       	pop	r15
	pop r14
 16a:	ef 90       	pop	r14
	pop r13
 16c:	df 90       	pop	r13
	pop r12
 16e:	cf 90       	pop	r12
	pop r11
 170:	bf 90       	pop	r11
	pop r10
 172:	af 90       	pop	r10
	pop r9
 174:	9f 90       	pop	r9
	pop r8
 176:	8f 90       	pop	r8
	pop r7
 178:	7f 90       	pop	r7
	pop r6
 17a:	6f 90       	pop	r6
	pop r5
 17c:	5f 90       	pop	r5
	pop r4
 17e:	4f 90       	pop	r4
	pop r3
 180:	3f 90       	pop	r3
	pop r2
 182:	2f 90       	pop	r2

	ret
 184:	08 95       	ret

00000186 <x_schedule>:

; your code here


	// Return to next thread
		ret
 186:	08 95       	ret

00000188 <bit2mask8>:

		.global bit2mask8
bit2mask8:

		;r24 contains thread ID input
		cpi r24, 1
 188:	81 30       	cpi	r24, 0x01	; 1
		brlo none
 18a:	48 f0       	brcs	.+18     	; 0x19e <none>
		cp 8, r24
		brge none

		ldi r25, 1
		*/
 		adc r24, 1
 18c:	81 1d       	adc	r24, r1

0000018e <again>:
again:

		dec r24
 18e:	8a 95       	dec	r24
		cpi r24, 1
 190:	81 30       	cpi	r24, 0x01	; 1
		brlo done
 192:	10 f0       	brcs	.+4      	; 0x198 <done>
		lsl r25
 194:	99 0f       	add	r25, r25
		jmp again
 196:	fb cf       	rjmp	.-10     	; 0x18e <again>

00000198 <done>:

done:	mov r24, r25
 198:	89 2f       	mov	r24, r25
		ldi r25, 0
		jmp finished
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <finished>

0000019e <none>:

none:
		ldi r25, 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
		ldi r24, 0	
 1a0:	80 e0       	ldi	r24, 0x00	; 0

000001a2 <finished>:
finished:
		ret
 1a2:	08 95       	ret

000001a4 <main>:
#include "PSerial.h"
#include "acx.h"

int main(void)
{
    DDRB |= 0x80;
 1a4:	27 9a       	sbi	0x04, 7	; 4

    PSerial_open(0, BAUD115200, SERIAL_8N1);
 1a6:	26 e0       	ldi	r18, 0x06	; 6
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	48 e0       	ldi	r20, 0x08	; 8
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	47 d0       	rcall	.+142    	; 0x244 <PSerial_open>
	
	int i;
	
	for (int j = 0; j < SP; j++) {
 1b6:	8d b7       	in	r24, 0x3d	; 61
 1b8:	9e b7       	in	r25, 0x3e	; 62
 1ba:	89 2b       	or	r24, r25
 1bc:	51 f0       	breq	.+20     	; 0x1d2 <main+0x2e>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
		i = (int) SP;
 1c2:	2d b7       	in	r18, 0x3d	; 61
 1c4:	3e b7       	in	r19, 0x3e	; 62

    PSerial_open(0, BAUD115200, SERIAL_8N1);
	
	int i;
	
	for (int j = 0; j < SP; j++) {
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	2d b7       	in	r18, 0x3d	; 61
 1ca:	3e b7       	in	r19, 0x3e	; 62
 1cc:	82 17       	cp	r24, r18
 1ce:	93 07       	cpc	r25, r19
        asm("push 0x1");
        PORTB ^= 0x80;
        _delay_ms(100);
		*/

		x_yield();
 1d0:	c0 f3       	brcs	.-16     	; 0x1c2 <main+0x1e>
 1d2:	a8 df       	rcall	.-176    	; 0x124 <x_yield>
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <main+0x2e>

000001d6 <PSerial_read>:
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	71 f0       	breq	.+28     	; 0x1f6 <PSerial_read+0x20>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <PSerial_read+0x10>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	99 f0       	breq	.+38     	; 0x206 <PSerial_read+0x30>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	c9 f0       	breq	.+50     	; 0x216 <PSerial_read+0x40>
 1e4:	20 c0       	rjmp	.+64     	; 0x226 <PSerial_read+0x50>
 1e6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1ea:	88 23       	and	r24, r24
 1ec:	fc f4       	brge	.+62     	; 0x22c <PSerial_read+0x56>
 1ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	08 95       	ret
 1f6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 1fa:	88 23       	and	r24, r24
 1fc:	d4 f4       	brge	.+52     	; 0x232 <PSerial_read+0x5c>
 1fe:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	08 95       	ret
 206:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 20a:	88 23       	and	r24, r24
 20c:	ac f4       	brge	.+42     	; 0x238 <PSerial_read+0x62>
 20e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	08 95       	ret
 216:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
 21a:	88 23       	and	r24, r24
 21c:	84 f4       	brge	.+32     	; 0x23e <PSerial_read+0x68>
 21e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	08 95       	ret
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	08 95       	ret
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	9f ef       	ldi	r25, 0xFF	; 255
 236:	08 95       	ret
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	9f ef       	ldi	r25, 0xFF	; 255
 23c:	08 95       	ret
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	9f ef       	ldi	r25, 0xFF	; 255
 242:	08 95       	ret

00000244 <PSerial_open>:
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	91 f0       	breq	.+36     	; 0x26c <PSerial_open+0x28>
 248:	28 f0       	brcs	.+10     	; 0x254 <PSerial_open+0x10>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	d9 f0       	breq	.+54     	; 0x284 <PSerial_open+0x40>
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	29 f1       	breq	.+74     	; 0x29c <PSerial_open+0x58>
 252:	2f c0       	rjmp	.+94     	; 0x2b2 <PSerial_open+0x6e>
 254:	e1 ec       	ldi	r30, 0xC1	; 193
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	90 81       	ld	r25, Z
 25a:	98 61       	ori	r25, 0x18	; 24
 25c:	90 83       	st	Z, r25
 25e:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 262:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 266:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 26a:	23 c0       	rjmp	.+70     	; 0x2b2 <PSerial_open+0x6e>
 26c:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 270:	e9 ec       	ldi	r30, 0xC9	; 201
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	90 81       	ld	r25, Z
 276:	98 61       	ori	r25, 0x18	; 24
 278:	90 83       	st	Z, r25
 27a:	50 93 cd 00 	sts	0x00CD, r21	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 27e:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 282:	17 c0       	rjmp	.+46     	; 0x2b2 <PSerial_open+0x6e>
 284:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
 288:	e1 ed       	ldi	r30, 0xD1	; 209
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	90 81       	ld	r25, Z
 28e:	98 61       	ori	r25, 0x18	; 24
 290:	90 83       	st	Z, r25
 292:	50 93 d5 00 	sts	0x00D5, r21	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 296:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
 29a:	0b c0       	rjmp	.+22     	; 0x2b2 <PSerial_open+0x6e>
 29c:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
 2a0:	e1 e3       	ldi	r30, 0x31	; 49
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
 2a4:	90 81       	ld	r25, Z
 2a6:	98 61       	ori	r25, 0x18	; 24
 2a8:	90 83       	st	Z, r25
 2aa:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
 2ae:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
 2b2:	91 cf       	rjmp	.-222    	; 0x1d6 <PSerial_read>
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>

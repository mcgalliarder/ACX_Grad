
ACX_Grad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001005  00800220  00800220  000004ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000560  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137a  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e86  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cf  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000030e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f2  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000509  00000000  00000000  0000392a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e3       	ldi	r30, 0x36	; 54
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e1       	ldi	r18, 0x12	; 18
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 32       	cpi	r26, 0x25	; 37
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	74 d1       	rcall	.+744    	; 0x408 <main>
 120:	88 c1       	rjmp	.+784    	; 0x432 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
;------------------------------------------------------------------------
; Save thread context
;-------------------------------------------------------------------------

    ; Save registers for calling thread
	push r1 //Just in case
 124:	1f 92       	push	r1
	push r2 // Save and restore callee-save registers
 126:	2f 92       	push	r2
	push r3 // Push onto calling thread's stack
 128:	3f 92       	push	r3
	push r4
 12a:	4f 92       	push	r4
	push r5
 12c:	5f 92       	push	r5
	push r6
 12e:	6f 92       	push	r6
	push r7
 130:	7f 92       	push	r7
	push r8
 132:	8f 92       	push	r8
	push r9
 134:	9f 92       	push	r9
	push r10
 136:	af 92       	push	r10
	push r11
 138:	bf 92       	push	r11
	push r12
 13a:	cf 92       	push	r12
	push r13
 13c:	df 92       	push	r13
	push r14
 13e:	ef 92       	push	r14
	push r15
 140:	ff 92       	push	r15
	push r16
 142:	0f 93       	push	r16
	push r17
 144:	1f 93       	push	r17
	push r28
 146:	cf 93       	push	r28
	push r29
 148:	df 93       	push	r29

	; save stack pointer in appropriate array location
    ;---------------------------
;	in r24, 

 	lds r30, x_thread_id        ; get stack ID
 14a:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__data_end>
 	ldi r31, 0
 14e:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30                     ; get stack control table offset
 150:	ee 0f       	add	r30, r30
 	rol r31
 152:	ff 1f       	adc	r31, r31
 	lsl r30
 154:	ee 0f       	add	r30, r30
 	rol r31
 156:	ff 1f       	adc	r31, r31
 	subi r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 158:	e0 50       	subi	r30, 0x00	; 0
 	sbci r31, hi8(-(stackControlTable))
 15a:	fe 4f       	sbci	r31, 0xFE	; 254

	in	r24, __SP_L__			; Put SP in r24-25
 15c:	8d b7       	in	r24, 0x3d	; 61
	in	r25, __SP_H__
 15e:	9e b7       	in	r25, 0x3e	; 62

	st	Z+,	r24					; *Z = SP 
 160:	81 93       	st	Z+, r24
	st	Z , r25
 162:	90 83       	st	Z, r25

	; Check for stack overflows
    ;---------------------------
 	
 	; int * Z = mem
	ldi r30, lo8(mem)           ; Init Z pointer to &mem
 164:	e3 e2       	ldi	r30, 0x23	; 35
 	ldi r31, hi8(mem)
 166:	fa e0       	ldi	r31, 0x0A	; 10

 	; threadID * stacksize for canary
	; int offset = x_thread_id * 256
	ldi r24, 0
 168:	80 e0       	ldi	r24, 0x00	; 0
	lds r25,	x_thread_id
 16a:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__data_end>

	add r31,	r25;
 16e:	f9 0f       	add	r31, r25
	ld	r24,	Z
 170:	80 81       	ld	r24, Z

	cpi	r24,	0xAA
 172:	8a 3a       	cpi	r24, 0xAA	; 170
	breq noSOF
 174:	09 f0       	breq	.+2      	; 0x178 <x_schedule>

00000176 <SOF>:
SOF:
	; Execute if there is a stack overflow
	call x_stack_overflow
 176:	dd d0       	rcall	.+442    	; 0x332 <x_stack_overflow>

00000178 <x_schedule>:
		.global	x_schedule
x_schedule:

	; Determine next thread to run
    ;---------------------------
	lds r18, x_thread_id
 178:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <__data_end>
	
	lds r19, disable
 17c:	30 91 22 0a 	lds	r19, 0x0A22	; 0x800a22 <disable>
	lds r20, suspend
 180:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <suspend>
	lds r21, delay
 184:	50 91 23 12 	lds	r21, 0x1223	; 0x801223 <delay>

	or r21, r20
 188:	54 2b       	or	r21, r20
	or r21, r19
 18a:	53 2b       	or	r21, r19

0000018c <scan_begin>:

scan_begin:
	subi r18, -1			; get next thhread
 18c:	2f 5f       	subi	r18, 0xFF	; 255
	andi r18, 0x07			; mod by numthreads
 18e:	27 70       	andi	r18, 0x07	; 7

	mov r24, r18
	call bit2mask8			; get mask of bit (thread_id + 1) % numthreads
 190:	82 2f       	mov	r24, r18
 192:	25 d0       	rcall	.+74     	; 0x1de <bit2mask8>

	and r21, r24
 194:	58 23       	and	r21, r24
	cp r21, r24
 196:	58 17       	cp	r21, r24

	breq scan_begin
 198:	c9 f3       	breq	.-14     	; 0x18c <scan_begin>


	; Retrieve next stack pointer for next thread
    ;---------------------------
	mov r30, r18        ; get stack ID
 19a:	e2 2f       	mov	r30, r18
 	ldi r31, 0
 19c:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30             ; get stack control table offset
 19e:	ee 0f       	add	r30, r30
 	rol r31
 1a0:	ff 1f       	adc	r31, r31
 	lsl r30
 1a2:	ee 0f       	add	r30, r30
 	rol r31
 1a4:	ff 1f       	adc	r31, r31
 	subi r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 1a6:	e0 50       	subi	r30, 0x00	; 0
 	sbci r31, hi8(-(stackControlTable))
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254

	ld	r24, Z+					
 1aa:	81 91       	ld	r24, Z+
	ld	r25, Z
 1ac:	90 81       	ld	r25, Z

    ; restore new thread's stack pointer
    ;---------------------------
    cli             ; begin stack pointer change		
 1ae:	f8 94       	cli
	out __SP_L__, r24
 1b0:	8d bf       	out	0x3d, r24	; 61
	out __SP_H__, r25
 1b2:	9e bf       	out	0x3e, r25	; 62
    sei             ; end  stack pointer change
 1b4:	78 94       	sei

000001b6 <restore>:
;---------------------------------------------------
restore:
 	
    ; restore new thread's registers 
    ;---------------------------
	pop r29
 1b6:	df 91       	pop	r29
	pop r28
 1b8:	cf 91       	pop	r28
	pop r17
 1ba:	1f 91       	pop	r17
	pop r16
 1bc:	0f 91       	pop	r16
	pop r15
 1be:	ff 90       	pop	r15
	pop r14
 1c0:	ef 90       	pop	r14
	pop r13
 1c2:	df 90       	pop	r13
	pop r12
 1c4:	cf 90       	pop	r12
	pop r11
 1c6:	bf 90       	pop	r11
	pop r10
 1c8:	af 90       	pop	r10
	pop r9
 1ca:	9f 90       	pop	r9
	pop r8
 1cc:	8f 90       	pop	r8
	pop r7
 1ce:	7f 90       	pop	r7
	pop r6
 1d0:	6f 90       	pop	r6
	pop r5
 1d2:	5f 90       	pop	r5
	pop r4
 1d4:	4f 90       	pop	r4
	pop r3
 1d6:	3f 90       	pop	r3
	pop r2
 1d8:	2f 90       	pop	r2
	pop r1
 1da:	1f 90       	pop	r1

	ret
 1dc:	08 95       	ret

000001de <bit2mask8>:
//-----------------------------------------------------------------------------------------------

		.global bit2mask8
bit2mask8:
		;r24 contains thread ID input
 		subi r24, -1
 1de:	8f 5f       	subi	r24, 0xFF	; 255
		ldi r25, 1
 1e0:	91 e0       	ldi	r25, 0x01	; 1

000001e2 <again>:
again:

		dec r24
 1e2:	8a 95       	dec	r24
		cpi r24, 1
 1e4:	81 30       	cpi	r24, 0x01	; 1
		brlo done
		lsl r25
 1e6:	10 f0       	brcs	.+4      	; 0x1ec <done>
		jmp again
 1e8:	99 0f       	add	r25, r25
 1ea:	fb cf       	rjmp	.-10     	; 0x1e2 <again>

000001ec <done>:

done:	mov r24, r25
 1ec:	89 2f       	mov	r24, r25
		ldi r25, 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
		ret
 1f0:	08 95       	ret

000001f2 <kernalInit>:
void x_enable(uint8_t ID) {
	cli();

	// Your initialization code here

	sei();
 1f2:	8e ef       	ldi	r24, 0xFE	; 254
 1f4:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <disable>
 1f8:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <suspend>
 1fc:	10 92 23 12 	sts	0x1223, r1	; 0x801223 <delay>
 200:	e1 e2       	ldi	r30, 0x21	; 33
 202:	f2 e0       	ldi	r31, 0x02	; 2
 204:	81 e3       	ldi	r24, 0x31	; 49
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	11 92       	st	Z+, r1
 20a:	11 92       	st	Z+, r1
 20c:	e8 17       	cp	r30, r24
 20e:	f9 07       	cpc	r31, r25
 210:	d9 f7       	brne	.-10     	; 0x208 <kernalInit+0x16>
 212:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__data_end>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 24 12 	sts	0x1224, r24	; 0x801224 <x_thread_mask>
 21c:	08 95       	ret

0000021e <placeCanaries>:
 21e:	8a ea       	ldi	r24, 0xAA	; 170
 220:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <mem>
 224:	80 93 23 0b 	sts	0x0B23, r24	; 0x800b23 <mem+0x100>
 228:	80 93 23 0c 	sts	0x0C23, r24	; 0x800c23 <mem+0x200>
 22c:	80 93 23 0d 	sts	0x0D23, r24	; 0x800d23 <mem+0x300>
 230:	80 93 23 0e 	sts	0x0E23, r24	; 0x800e23 <mem+0x400>
 234:	80 93 23 0f 	sts	0x0F23, r24	; 0x800f23 <mem+0x500>
 238:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <mem+0x600>
 23c:	80 93 23 11 	sts	0x1123, r24	; 0x801123 <mem+0x700>
 240:	08 95       	ret

00000242 <x_init>:
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	00 d0       	rcall	.+0      	; 0x24c <x_init+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	0d b7       	in	r16, 0x3d	; 61
 252:	1e b7       	in	r17, 0x3e	; 62
 254:	f8 94       	cli
 256:	cd df       	rcall	.-102    	; 0x1f2 <kernalInit>
 258:	e2 df       	rcall	.-60     	; 0x21e <placeCanaries>
 25a:	f8 01       	movw	r30, r16
 25c:	80 85       	ldd	r24, Z+8	; 0x08
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	81 85       	ldd	r24, Z+9	; 0x09
 262:	8a 83       	std	Y+2, r24	; 0x02
 264:	82 85       	ldd	r24, Z+10	; 0x0a
 266:	8b 83       	std	Y+3, r24	; 0x03
 268:	82 e2       	ldi	r24, 0x22	; 34
 26a:	9b e0       	ldi	r25, 0x0B	; 11
 26c:	9e bf       	out	0x3e, r25	; 62
 26e:	8d bf       	out	0x3d, r24	; 61
 270:	ed b7       	in	r30, 0x3d	; 61
 272:	fe b7       	in	r31, 0x3e	; 62
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	80 83       	st	Z, r24
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	df 01       	movw	r26, r30
 27c:	11 97       	sbiw	r26, 0x01	; 1
 27e:	8c 93       	st	X, r24
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	32 97       	sbiw	r30, 0x02	; 2
 284:	80 83       	st	Z, r24
 286:	8d b7       	in	r24, 0x3d	; 61
 288:	9e b7       	in	r25, 0x3e	; 62
 28a:	0a 97       	sbiw	r24, 0x0a	; 10
 28c:	9e bf       	out	0x3e, r25	; 62
 28e:	8d bf       	out	0x3d, r24	; 61
 290:	78 94       	sei
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	08 95       	ret

000002a2 <x_new>:
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <x_new+0xa>
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	f8 94       	cli
 2b2:	1b 82       	std	Y+3, r1	; 0x03
 2b4:	1a 82       	std	Y+2, r1	; 0x02
 2b6:	19 82       	std	Y+1, r1	; 0x01
 2b8:	7a 83       	std	Y+2, r23	; 0x02
 2ba:	69 83       	std	Y+1, r22	; 0x01
 2bc:	e8 2f       	mov	r30, r24
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	8f 01       	movw	r16, r30
 2ca:	00 50       	subi	r16, 0x00	; 0
 2cc:	1e 4f       	sbci	r17, 0xFE	; 254
 2ce:	f8 01       	movw	r30, r16
 2d0:	22 81       	ldd	r18, Z+2	; 0x02
 2d2:	33 81       	ldd	r19, Z+3	; 0x03
 2d4:	9b 81       	ldd	r25, Y+3	; 0x03
 2d6:	d9 01       	movw	r26, r18
 2d8:	9c 93       	st	X, r25
 2da:	9a 81       	ldd	r25, Y+2	; 0x02
 2dc:	b9 01       	movw	r22, r18
 2de:	61 50       	subi	r22, 0x01	; 1
 2e0:	71 09       	sbc	r23, r1
 2e2:	fb 01       	movw	r30, r22
 2e4:	90 83       	st	Z, r25
 2e6:	99 81       	ldd	r25, Y+1	; 0x01
 2e8:	12 97       	sbiw	r26, 0x02	; 2
 2ea:	9c 93       	st	X, r25
 2ec:	26 51       	subi	r18, 0x16	; 22
 2ee:	31 09       	sbc	r19, r1
 2f0:	f8 01       	movw	r30, r16
 2f2:	31 83       	std	Z+1, r19	; 0x01
 2f4:	20 83       	st	Z, r18
 2f6:	24 2f       	mov	r18, r20
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <x_new+0x60>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	8a 95       	dec	r24
 304:	e2 f7       	brpl	.-8      	; 0x2fe <x_new+0x5c>
 306:	cb 01       	movw	r24, r22
 308:	44 23       	and	r20, r20
 30a:	29 f0       	breq	.+10     	; 0x316 <x_new+0x74>
 30c:	80 95       	com	r24
 30e:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <disable>
 312:	89 23       	and	r24, r25
 314:	03 c0       	rjmp	.+6      	; 0x31c <x_new+0x7a>
 316:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <disable>
 31a:	89 2b       	or	r24, r25
 31c:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <disable>
 320:	78 94       	sei
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <x_stack_overflow>:
	// return to caller.
}

// called from X_yield if the canary is malformed
void x_stack_overflow(void) {
	DDRB |= 0x80;
 332:	27 9a       	sbi	0x04, 7	; 4

	// return to caller.
}

// called from X_yield if the canary is malformed
void x_stack_overflow(void) {
 334:	23 e0       	ldi	r18, 0x03	; 3
 336:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	4f ef       	ldi	r20, 0xFF	; 255
 33a:	81 ee       	ldi	r24, 0xE1	; 225
 33c:	94 e0       	ldi	r25, 0x04	; 4
 33e:	41 50       	subi	r20, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <x_stack_overflow+0xc>
 346:	00 c0       	rjmp	.+0      	; 0x348 <x_stack_overflow+0x16>
 348:	00 00       	nop
	DDRB |= 0x80;
	while (1) {
		for (int i = 0; i < 3; i++) {
			_delay_ms(100);
			PORTB |= 0x80;
 34a:	2f 9a       	sbi	0x05, 7	; 5
 34c:	4f ef       	ldi	r20, 0xFF	; 255
 34e:	81 ee       	ldi	r24, 0xE1	; 225
 350:	94 e0       	ldi	r25, 0x04	; 4
 352:	41 50       	subi	r20, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <x_stack_overflow+0x20>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <x_stack_overflow+0x2a>
 35c:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 0x80;
 35e:	85 b1       	in	r24, 0x05	; 5
 360:	80 58       	subi	r24, 0x80	; 128
 362:	85 b9       	out	0x05, r24	; 5
 364:	21 50       	subi	r18, 0x01	; 1
 366:	31 09       	sbc	r19, r1

// called from X_yield if the canary is malformed
void x_stack_overflow(void) {
	DDRB |= 0x80;
	while (1) {
		for (int i = 0; i < 3; i++) {
 368:	39 f7       	brne	.-50     	; 0x338 <x_stack_overflow+0x6>
 36a:	23 e0       	ldi	r18, 0x03	; 3
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	4f ef       	ldi	r20, 0xFF	; 255
 370:	85 ea       	ldi	r24, 0xA5	; 165
 372:	9e e0       	ldi	r25, 0x0E	; 14
 374:	41 50       	subi	r20, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <x_stack_overflow+0x42>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <x_stack_overflow+0x4c>
 37e:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
			_delay_ms(300);
			PORTB |= 0x80;
 380:	2f 9a       	sbi	0x05, 7	; 5
 382:	4f ef       	ldi	r20, 0xFF	; 255
 384:	85 ea       	ldi	r24, 0xA5	; 165
 386:	9e e0       	ldi	r25, 0x0E	; 14
 388:	41 50       	subi	r20, 0x01	; 1
 38a:	80 40       	sbci	r24, 0x00	; 0
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <x_stack_overflow+0x56>
 390:	00 c0       	rjmp	.+0      	; 0x392 <x_stack_overflow+0x60>
 392:	00 00       	nop
			_delay_ms(300);
			PORTB ^= 0x80;
 394:	85 b1       	in	r24, 0x05	; 5
 396:	80 58       	subi	r24, 0x80	; 128
 398:	85 b9       	out	0x05, r24	; 5
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	31 09       	sbc	r19, r1
			_delay_ms(100);
			PORTB |= 0x80;
			_delay_ms(100);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
 39e:	39 f7       	brne	.-50     	; 0x36e <x_stack_overflow+0x3c>
 3a0:	23 e0       	ldi	r18, 0x03	; 3
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	4f ef       	ldi	r20, 0xFF	; 255
 3a6:	81 ee       	ldi	r24, 0xE1	; 225
 3a8:	94 e0       	ldi	r25, 0x04	; 4
 3aa:	41 50       	subi	r20, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <x_stack_overflow+0x78>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <x_stack_overflow+0x82>
 3b4:	00 00       	nop
			_delay_ms(300);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
			_delay_ms(100);
			PORTB |= 0x80;
 3b6:	2f 9a       	sbi	0x05, 7	; 5
 3b8:	4f ef       	ldi	r20, 0xFF	; 255
 3ba:	81 ee       	ldi	r24, 0xE1	; 225
 3bc:	94 e0       	ldi	r25, 0x04	; 4
 3be:	41 50       	subi	r20, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <x_stack_overflow+0x8c>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <x_stack_overflow+0x96>
 3c8:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 0x80;
 3ca:	85 b1       	in	r24, 0x05	; 5
 3cc:	80 58       	subi	r24, 0x80	; 128
 3ce:	85 b9       	out	0x05, r24	; 5
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	31 09       	sbc	r19, r1
			_delay_ms(300);
			PORTB |= 0x80;
			_delay_ms(300);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
 3d4:	39 f7       	brne	.-50     	; 0x3a4 <x_stack_overflow+0x72>
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	45 ea       	ldi	r20, 0xA5	; 165
 3da:	8e e0       	ldi	r24, 0x0E	; 14
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	40 40       	sbci	r20, 0x00	; 0
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <x_stack_overflow+0xaa>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <x_stack_overflow+0xb4>
 3e6:	00 00       	nop
 3e8:	a5 cf       	rjmp	.-182    	; 0x334 <x_stack_overflow+0x2>

000003ea <testThread>:
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	1f 92       	push	r1
 3f0:	1f 92       	push	r1
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	1a 82       	std	Y+2, r1	; 0x02
 3f8:	19 82       	std	Y+1, r1	; 0x01
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	9a 83       	std	Y+2, r25	; 0x02
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	8f de       	rcall	.-738    	; 0x124 <x_yield>
 406:	f9 cf       	rjmp	.-14     	; 0x3fa <testThread+0x10>

00000408 <main>:
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	1f 92       	push	r1
 40e:	1f 92       	push	r1
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	1a 82       	std	Y+2, r1	; 0x02
 416:	19 82       	std	Y+1, r1	; 0x01
 418:	14 df       	rcall	.-472    	; 0x242 <x_init>
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	65 ef       	ldi	r22, 0xF5	; 245
 41e:	71 e0       	ldi	r23, 0x01	; 1
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	3f df       	rcall	.-386    	; 0x2a2 <x_new>
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	9a 81       	ldd	r25, Y+2	; 0x02
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	9a 83       	std	Y+2, r25	; 0x02
 42c:	89 83       	std	Y+1, r24	; 0x01
 42e:	7a de       	rcall	.-780    	; 0x124 <x_yield>
 430:	f9 cf       	rjmp	.-14     	; 0x424 <main+0x1c>

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>

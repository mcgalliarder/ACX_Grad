
ACX_Grad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001005  00800200  00800200  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000370  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000142c  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e79  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000966  00000000  00000000  00002715  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  0000307c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b7  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ae  00000000  00000000  000038bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003f6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e8       	ldi	r30, 0x8A	; 138
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e1       	ldi	r18, 0x12	; 18
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 30       	cpi	r26, 0x05	; 5
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	37 d0       	rcall	.+110    	; 0x18e <main>
 120:	b2 c0       	rjmp	.+356    	; 0x286 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_schedule>:

; your code here


	// Return to next thread
		ret
 124:	08 95       	ret

00000126 <bit2mask8>:
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		
		
		ret
 126:	08 95       	ret

00000128 <kernalInit>:

//---------------------------------------------------
// Initialize all kernal state variables
//---------------------------------------------------
void kernalInit(void) {
    disable = 0xFE;
 128:	8e ef       	ldi	r24, 0xFE	; 254
 12a:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <disable>
    suspend = 0x00;
 12e:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <suspend>
    delay = 0x00;
 132:	10 92 03 12 	sts	0x1203, r1	; 0x801203 <delay>
 136:	e1 e0       	ldi	r30, 0x01	; 1
 138:	f2 e0       	ldi	r31, 0x02	; 2
 13a:	81 e1       	ldi	r24, 0x11	; 17
 13c:	92 e0       	ldi	r25, 0x02	; 2

    for (int i = 0; i < MAXTHREADS; i++)
        // no delays
        delayCounters[i] = 0; 
 13e:	11 92       	st	Z+, r1
 140:	11 92       	st	Z+, r1
void kernalInit(void) {
    disable = 0xFE;
    suspend = 0x00;
    delay = 0x00;

    for (int i = 0; i < MAXTHREADS; i++)
 142:	e8 17       	cp	r30, r24
 144:	f9 07       	cpc	r31, r25
 146:	d9 f7       	brne	.-10     	; 0x13e <kernalInit+0x16>
        // no delays
        delayCounters[i] = 0; 

    x_thread_id = 0; // current thread
 148:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_end>
    x_thread_mask = 0x01;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 04 12 	sts	0x1204, r24	; 0x801204 <x_thread_mask>
 152:	08 95       	ret

00000154 <placeCanaries>:

//---------------------------------------------------
// Stack Control
//---------------------------------------------------
void placeCanaries(void) {
    mem[T0_CANARY_OFFS] = CANARY;
 154:	8a ea       	ldi	r24, 0xAA	; 170
 156:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <mem>
    mem[T1_CANARY_OFFS] = CANARY;
 15a:	80 93 03 0b 	sts	0x0B03, r24	; 0x800b03 <mem+0x100>
    mem[T2_CANARY_OFFS] = CANARY;
 15e:	80 93 03 0c 	sts	0x0C03, r24	; 0x800c03 <mem+0x200>
    mem[T3_CANARY_OFFS] = CANARY;
 162:	80 93 03 0d 	sts	0x0D03, r24	; 0x800d03 <mem+0x300>
    mem[T4_CANARY_OFFS] = CANARY;
 166:	80 93 03 0e 	sts	0x0E03, r24	; 0x800e03 <mem+0x400>
    mem[T5_CANARY_OFFS] = CANARY;
 16a:	80 93 03 0f 	sts	0x0F03, r24	; 0x800f03 <mem+0x500>
    mem[T6_CANARY_OFFS] = CANARY;
 16e:	80 93 03 10 	sts	0x1003, r24	; 0x801003 <mem+0x600>
    mem[T7_CANARY_OFFS] = CANARY;
 172:	80 93 03 11 	sts	0x1103, r24	; 0x801103 <mem+0x700>
 176:	08 95       	ret

00000178 <x_init>:
// void x_yield(void)
// void x_schedule(void)

void x_init(void)
{
	cli();
 178:	f8 94       	cli

    // initialize kernal data structures
    kernalInit();
 17a:	d6 df       	rcall	.-84     	; 0x128 <kernalInit>
    // place canary values
    placeCanaries();
 17c:	eb df       	rcall	.-42     	; 0x154 <placeCanaries>
 17e:	8d b7       	in	r24, 0x3d	; 61

    // Save the stack pointer as a byte pointer
    byte * stackP = (byte *) SP;
 180:	9e b7       	in	r25, 0x3e	; 62
 182:	82 e0       	ldi	r24, 0x02	; 2
    ret.addr[0] = * (stackP - 1);
    ret.addr[1] = * (stackP - 2);
    ret.addr[2] = * (stackP - 3);

    // change the stack pointer to the bottom of T0
    SP = (int) (mem + T0_STACK_BASE_OFFS);
 184:	9b e0       	ldi	r25, 0x0B	; 11
 186:	9e bf       	out	0x3e, r25	; 62
 188:	8d bf       	out	0x3d, r24	; 61
 18a:	78 94       	sei
    // push the old return address onto the new stack
    asm("push %0" : "=r" (ret.addr[2]));
    asm("push %0" : "=r" (ret.addr[1]));
    asm("push %0" : "=r" (ret.addr[0]));

	sei();
 18c:	08 95       	ret

0000018e <main>:
 18e:	27 9a       	sbi	0x04, 7	; 4

int main(void)
{
    DDRB |= 0x80;

    PSerial_open(0, BAUD115200, SERIAL_8N1);
 190:	26 e0       	ldi	r18, 0x06	; 6
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	48 e0       	ldi	r20, 0x08	; 8
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	3a d0       	rcall	.+116    	; 0x214 <PSerial_open>

    x_init();
 1a0:	eb df       	rcall	.-42     	; 0x178 <x_init>

    x_yield();
 1a2:	c0 df       	rcall	.-128    	; 0x124 <x_schedule>
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <main+0x16>

000001a6 <PSerial_read>:
 1a6:	81 30       	cpi	r24, 0x01	; 1
}

int PSerial_read(unsigned char port){
    int data = -1;

    switch (port) {
 1a8:	71 f0       	breq	.+28     	; 0x1c6 <PSerial_read+0x20>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <PSerial_read+0x10>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	99 f0       	breq	.+38     	; 0x1d6 <PSerial_read+0x30>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	c9 f0       	breq	.+50     	; 0x1e6 <PSerial_read+0x40>
 1b4:	20 c0       	rjmp	.+64     	; 0x1f6 <PSerial_read+0x50>
        case 0: 
           if (UCSR0A & (1<<RXC0))
 1b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1ba:	88 23       	and	r24, r24
 1bc:	fc f4       	brge	.+62     	; 0x1fc <PSerial_read+0x56>
                data = UDR0;
 1be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
           break;
        case 1:
            if (UCSR1A & (1<<RXC1))
 1c6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 1ca:	88 23       	and	r24, r24
 1cc:	d4 f4       	brge	.+52     	; 0x202 <PSerial_read+0x5c>
                data = UDR1;
 1ce:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	08 95       	ret
            break;
        case 2:
            if (UCSR2A & (1<<RXC2))
 1d6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 1da:	88 23       	and	r24, r24
 1dc:	ac f4       	brge	.+42     	; 0x208 <PSerial_read+0x62>
                data = UDR2;
 1de:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	08 95       	ret
            break;
        case 3:
             if (UCSR3A & (1<<RXC3))
 1e6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
 1ea:	88 23       	and	r24, r24
 1ec:	84 f4       	brge	.+32     	; 0x20e <PSerial_read+0x68>
                data = UDR3;
 1ee:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	08 95       	ret
	if (speed == 250000l) return 3l;
	return 103l;
}

int PSerial_read(unsigned char port){
    int data = -1;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	9f ef       	ldi	r25, 0xFF	; 255
 1fa:	08 95       	ret
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	9f ef       	ldi	r25, 0xFF	; 255
 200:	08 95       	ret
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	08 95       	ret
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	08 95       	ret
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	9f ef       	ldi	r25, 0xFF	; 255
            break;
        default :
            break;
    }
    return data;
}
 212:	08 95       	ret

00000214 <PSerial_open>:


#include "PSerial.h"

void PSerial_open(unsigned char port, long speed, int config){
    switch (port) {
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	91 f0       	breq	.+36     	; 0x23c <PSerial_open+0x28>
 218:	28 f0       	brcs	.+10     	; 0x224 <PSerial_open+0x10>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	d9 f0       	breq	.+54     	; 0x254 <PSerial_open+0x40>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	29 f1       	breq	.+74     	; 0x26c <PSerial_open+0x58>
 222:	2f c0       	rjmp	.+94     	; 0x282 <PSerial_open+0x6e>
        case 0: 
			UCSR0B |= 0x18;
 224:	e1 ec       	ldi	r30, 0xC1	; 193
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	90 81       	ld	r25, Z
 22a:	98 61       	ori	r25, 0x18	; 24
 22c:	90 83       	st	Z, r25
            UCSR0C = config;
 22e:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			UBRR0 = speed;
 232:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 236:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
            break;
 23a:	23 c0       	rjmp	.+70     	; 0x282 <PSerial_open+0x6e>
        case 1:
            UCSR1C = config;
 23c:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
			UCSR1B |= 0x18;
 240:	e9 ec       	ldi	r30, 0xC9	; 201
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	90 81       	ld	r25, Z
 246:	98 61       	ori	r25, 0x18	; 24
 248:	90 83       	st	Z, r25
            UBRR1 = speed;
 24a:	50 93 cd 00 	sts	0x00CD, r21	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 24e:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
            break;
 252:	17 c0       	rjmp	.+46     	; 0x282 <PSerial_open+0x6e>
        case 2:
            UCSR2C = config;
 254:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			UCSR2B |= 0x18;
 258:	e1 ed       	ldi	r30, 0xD1	; 209
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	90 81       	ld	r25, Z
 25e:	98 61       	ori	r25, 0x18	; 24
 260:	90 83       	st	Z, r25
            UBRR2 = speed;
 262:	50 93 d5 00 	sts	0x00D5, r21	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 266:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
            break;
 26a:	0b c0       	rjmp	.+22     	; 0x282 <PSerial_open+0x6e>
        case 3:
            UCSR3C = config;
 26c:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
			UCSR3B |= 0x18;
 270:	e1 e3       	ldi	r30, 0x31	; 49
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	90 81       	ld	r25, Z
 276:	98 61       	ori	r25, 0x18	; 24
 278:	90 83       	st	Z, r25
            UBRR3 = speed;
 27a:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
 27e:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
            break;
        default:
            break;
    }
	PSerial_read(port);
 282:	91 cf       	rjmp	.-222    	; 0x1a6 <PSerial_read>
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>

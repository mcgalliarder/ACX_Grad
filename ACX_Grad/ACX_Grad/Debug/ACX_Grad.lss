
ACX_Grad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001005  00800220  00800220  0000042c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001381  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e89  00000000  00000000  000018d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000918  00000000  00000000  0000275a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00003074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000694  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000439  00000000  00000000  0000381c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003c55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e7       	ldi	r30, 0x78	; 120
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e1       	ldi	r18, 0x12	; 18
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 32       	cpi	r26, 0x25	; 37
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	1a d1       	rcall	.+564    	; 0x354 <main>
 120:	29 c1       	rjmp	.+594    	; 0x374 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
;------------------------------------------------------------------------
; Save thread context
;-------------------------------------------------------------------------

    ; Save registers for calling thread
	push r2 // Save and restore callee-save registers
 124:	2f 92       	push	r2
	push r3 // Push onto calling thread's stack
 126:	3f 92       	push	r3
	push r4
 128:	4f 92       	push	r4
	push r5
 12a:	5f 92       	push	r5
	push r6
 12c:	6f 92       	push	r6
	push r7
 12e:	7f 92       	push	r7
	push r8
 130:	8f 92       	push	r8
	push r9
 132:	9f 92       	push	r9
	push r10
 134:	af 92       	push	r10
	push r11
 136:	bf 92       	push	r11
	push r12
 138:	cf 92       	push	r12
	push r13
 13a:	df 92       	push	r13
	push r14
 13c:	ef 92       	push	r14
	push r15
 13e:	ff 92       	push	r15
	push r16
 140:	0f 93       	push	r16
	push r17
 142:	1f 93       	push	r17

	; save stack pointer in appropriate array location
    ;---------------------------
;	in r24, 

 	lds r30, x_thread_id        ; get stack ID
 144:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__data_end>
 	ldi r31, 0
 148:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30                     ; get stack control table offset
 14a:	ee 0f       	add	r30, r30
 	rol r31
 14c:	ff 1f       	adc	r31, r31
 	lsl r30
 14e:	ee 0f       	add	r30, r30
 	rol r31
 150:	ff 1f       	adc	r31, r31
 	subi r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 152:	e0 50       	subi	r30, 0x00	; 0
 	subi r31, hi8(-(stackControlTable))
 154:	fe 5f       	subi	r31, 0xFE	; 254

	in	r24, __SP_L__			; Put SP in r24-25
 156:	8e b7       	in	r24, 0x3e	; 62
	in	r25, __SP_H__
 158:	9d b7       	in	r25, 0x3d	; 61

	st	Z+,	r24					; *Z = SP 
 15a:	81 93       	st	Z+, r24
	st	Z , r25
 15c:	90 83       	st	Z, r25

	; Check for stack overflows
    ;---------------------------
 	
 	; int * Z = mem
	ldi r30, lo8(mem)           ; Init Z pointer to &mem
 15e:	e3 e2       	ldi	r30, 0x23	; 35
 	ldi r31, hi8(mem)
 160:	fa e0       	ldi	r31, 0x0A	; 10

 	; threadID * stacksize for canary
	; int offset = x_thread_id * 256
	ldi r24, 0
 162:	80 e0       	ldi	r24, 0x00	; 0
	lds r25,	x_thread_id
 164:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__data_end>

	add r31,	r25;
 168:	f9 0f       	add	r31, r25
	ld	r24,	Z
 16a:	80 81       	ld	r24, Z

	cpi	r24,	0xAA
 16c:	8a 3a       	cpi	r24, 0xAA	; 170
	breq noSOF
 16e:	09 f0       	breq	.+2      	; 0x172 <x_schedule>

00000170 <SOF>:
SOF:
	; Execute if there is a stack overflow
	call x_stack_overflow
 170:	95 d0       	rcall	.+298    	; 0x29c <x_stack_overflow>

00000172 <x_schedule>:
		.global	x_schedule
x_schedule:

	; Determine next thread to run
    ;---------------------------
	lds r18, x_thread_id
 172:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <__data_end>

00000176 <scan_begin>:
scan_begin:
	subi r18, -1			; get next thhread
 176:	2f 5f       	subi	r18, 0xFF	; 255
	andi r18, 0x07			; mod by numthreads
 178:	27 70       	andi	r18, 0x07	; 7

	lds r19, disable
 17a:	30 91 22 0a 	lds	r19, 0x0A22	; 0x800a22 <disable>
	lds r20, suspend
 17e:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <suspend>
	lds r21, delay
 182:	50 91 23 12 	lds	r21, 0x1223	; 0x801223 <delay>

	or r21, r20
 186:	54 2b       	or	r21, r20
	or r21, r19
 188:	53 2b       	or	r21, r19

	mov r24, r18
	call bit2mask8			; get mask of bit (thread_id + 1) % numthreads
 18a:	82 2f       	mov	r24, r18
 18c:	22 d0       	rcall	.+68     	; 0x1d2 <bit2mask8>

	and r21, r24
 18e:	58 23       	and	r21, r24
	cp r21, r24
 190:	58 17       	cp	r21, r24
	breq scan_begin
 192:	89 f3       	breq	.-30     	; 0x176 <scan_begin>


	; Retrieve next stack pointer for next thread
    ;---------------------------
	mov r30, r18        ; get stack ID
 194:	e2 2f       	mov	r30, r18
 	ldi r31, 0
 196:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30                     ; get stack control table offset
 198:	ee 0f       	add	r30, r30
 	rol r31
 19a:	ff 1f       	adc	r31, r31
 	lsl r30
 19c:	ee 0f       	add	r30, r30
 	rol r31
 19e:	ff 1f       	adc	r31, r31
 	subi r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 1a0:	e0 50       	subi	r30, 0x00	; 0
 	subi r31, hi8(-(stackControlTable))
 1a2:	fe 5f       	subi	r31, 0xFE	; 254

	ld	r24, Z+					
 1a4:	81 91       	ld	r24, Z+
	ld	r25, Z
 1a6:	90 81       	ld	r25, Z

    ; restore new thread's stack pointer
    ;---------------------------
    cli             ; begin stack pointer change		
 1a8:	f8 94       	cli
	out __SP_L__, r24
 1aa:	8e bf       	out	0x3e, r24	; 62
	out __SP_H__, r25
 1ac:	9d bf       	out	0x3d, r25	; 61
    sei             ; end  stack pointer change
 1ae:	78 94       	sei

000001b0 <restore>:
;---------------------------------------------------
restore:
 	
    ; restore new thread's registers 
    ;---------------------------
	pop r17
 1b0:	1f 91       	pop	r17
	pop r16
 1b2:	0f 91       	pop	r16
	pop r15
 1b4:	ff 90       	pop	r15
	pop r14
 1b6:	ef 90       	pop	r14
	pop r13
 1b8:	df 90       	pop	r13
	pop r12
 1ba:	cf 90       	pop	r12
	pop r11
 1bc:	bf 90       	pop	r11
	pop r10
 1be:	af 90       	pop	r10
	pop r9
 1c0:	9f 90       	pop	r9
	pop r8
 1c2:	8f 90       	pop	r8
	pop r7
 1c4:	7f 90       	pop	r7
	pop r6
 1c6:	6f 90       	pop	r6
	pop r5
 1c8:	5f 90       	pop	r5
	pop r4
 1ca:	4f 90       	pop	r4
	pop r3
 1cc:	3f 90       	pop	r3
	pop r2
 1ce:	2f 90       	pop	r2

	ret
 1d0:	08 95       	ret

000001d2 <bit2mask8>:
		cpi r24, 1
		brlo none
		cp 8, r24
		brge none
		*/
 		adc r24, 1
 1d2:	81 1d       	adc	r24, r1
		ldi r25, 1
 1d4:	91 e0       	ldi	r25, 0x01	; 1

000001d6 <again>:
again:

		dec r24
 1d6:	8a 95       	dec	r24
		cpi r24, 1
 1d8:	81 30       	cpi	r24, 0x01	; 1
		brlo done
		lsl r25
 1da:	10 f0       	brcs	.+4      	; 0x1e0 <done>
		jmp again
 1dc:	99 0f       	add	r25, r25

done:	mov r24, r25
 1de:	fb cf       	rjmp	.-10     	; 0x1d6 <again>

000001e0 <done>:
		ldi r25, 0
 1e0:	89 2f       	mov	r24, r25
		jmp finished
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <finished>

000001e6 <none>:

none:
		ldi r25, 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
		ldi r24, 0	
 1e8:	80 e0       	ldi	r24, 0x00	; 0

000001ea <finished>:
finished:
		ret
 1ea:	08 95       	ret

000001ec <kernalInit>:
void x_enable(uint8_t ID) {
	cli();

	// Your initialization code here

	sei();
 1ec:	8e ef       	ldi	r24, 0xFE	; 254
 1ee:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <disable>
 1f2:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <suspend>
 1f6:	10 92 23 12 	sts	0x1223, r1	; 0x801223 <delay>
 1fa:	e1 e2       	ldi	r30, 0x21	; 33
 1fc:	f2 e0       	ldi	r31, 0x02	; 2
 1fe:	81 e3       	ldi	r24, 0x31	; 49
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	11 92       	st	Z+, r1
 204:	11 92       	st	Z+, r1
 206:	e8 17       	cp	r30, r24
 208:	f9 07       	cpc	r31, r25
 20a:	d9 f7       	brne	.-10     	; 0x202 <kernalInit+0x16>
 20c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__data_end>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 24 12 	sts	0x1224, r24	; 0x801224 <x_thread_mask>
 216:	08 95       	ret

00000218 <placeCanaries>:
 218:	8a ea       	ldi	r24, 0xAA	; 170
 21a:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <mem>
 21e:	80 93 23 0b 	sts	0x0B23, r24	; 0x800b23 <mem+0x100>
 222:	80 93 23 0c 	sts	0x0C23, r24	; 0x800c23 <mem+0x200>
 226:	80 93 23 0d 	sts	0x0D23, r24	; 0x800d23 <mem+0x300>
 22a:	80 93 23 0e 	sts	0x0E23, r24	; 0x800e23 <mem+0x400>
 22e:	80 93 23 0f 	sts	0x0F23, r24	; 0x800f23 <mem+0x500>
 232:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <mem+0x600>
 236:	80 93 23 11 	sts	0x1123, r24	; 0x801123 <mem+0x700>
 23a:	08 95       	ret

0000023c <x_init>:
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	00 d0       	rcall	.+0      	; 0x246 <x_init+0xa>
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	0d b7       	in	r16, 0x3d	; 61
 24c:	1e b7       	in	r17, 0x3e	; 62
 24e:	f8 94       	cli
 250:	cd df       	rcall	.-102    	; 0x1ec <kernalInit>
 252:	e2 df       	rcall	.-60     	; 0x218 <placeCanaries>
 254:	f8 01       	movw	r30, r16
 256:	80 85       	ldd	r24, Z+8	; 0x08
 258:	89 83       	std	Y+1, r24	; 0x01
 25a:	81 85       	ldd	r24, Z+9	; 0x09
 25c:	8a 83       	std	Y+2, r24	; 0x02
 25e:	82 85       	ldd	r24, Z+10	; 0x0a
 260:	8b 83       	std	Y+3, r24	; 0x03
 262:	82 e2       	ldi	r24, 0x22	; 34
 264:	9b e0       	ldi	r25, 0x0B	; 11
 266:	9e bf       	out	0x3e, r25	; 62
 268:	8d bf       	out	0x3d, r24	; 61
 26a:	ed b7       	in	r30, 0x3d	; 61
 26c:	fe b7       	in	r31, 0x3e	; 62
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	80 83       	st	Z, r24
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	df 01       	movw	r26, r30
 276:	11 97       	sbiw	r26, 0x01	; 1
 278:	8c 93       	st	X, r24
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	32 97       	sbiw	r30, 0x02	; 2
 27e:	80 83       	st	Z, r24
 280:	8d b7       	in	r24, 0x3d	; 61
 282:	9e b7       	in	r25, 0x3e	; 62
 284:	0a 97       	sbiw	r24, 0x0a	; 10
 286:	9e bf       	out	0x3e, r25	; 62
 288:	8d bf       	out	0x3d, r24	; 61
 28a:	78 94       	sei
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <x_stack_overflow>:
	// return to caller.
}

// called from X_yield if the canary is malformed
void x_stack_overflow(void) {
	DDRB |= 0x80;
 29c:	27 9a       	sbi	0x04, 7	; 4

	// return to caller.
}

// called from X_yield if the canary is malformed
void x_stack_overflow(void) {
 29e:	23 e0       	ldi	r18, 0x03	; 3
 2a0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	4f ef       	ldi	r20, 0xFF	; 255
 2a4:	81 ee       	ldi	r24, 0xE1	; 225
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	41 50       	subi	r20, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <x_stack_overflow+0xc>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <x_stack_overflow+0x16>
 2b2:	00 00       	nop
	DDRB |= 0x80;
	while (1) {
		for (int i = 0; i < 3; i++) {
			_delay_ms(100);
			PORTB |= 0x80;
 2b4:	2f 9a       	sbi	0x05, 7	; 5
 2b6:	4f ef       	ldi	r20, 0xFF	; 255
 2b8:	81 ee       	ldi	r24, 0xE1	; 225
 2ba:	94 e0       	ldi	r25, 0x04	; 4
 2bc:	41 50       	subi	r20, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <x_stack_overflow+0x20>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <x_stack_overflow+0x2a>
 2c6:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 0x80;
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	80 58       	subi	r24, 0x80	; 128
 2cc:	85 b9       	out	0x05, r24	; 5
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	31 09       	sbc	r19, r1

// called from X_yield if the canary is malformed
void x_stack_overflow(void) {
	DDRB |= 0x80;
	while (1) {
		for (int i = 0; i < 3; i++) {
 2d2:	39 f7       	brne	.-50     	; 0x2a2 <x_stack_overflow+0x6>
 2d4:	23 e0       	ldi	r18, 0x03	; 3
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	4f ef       	ldi	r20, 0xFF	; 255
 2da:	85 ea       	ldi	r24, 0xA5	; 165
 2dc:	9e e0       	ldi	r25, 0x0E	; 14
 2de:	41 50       	subi	r20, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <x_stack_overflow+0x42>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <x_stack_overflow+0x4c>
 2e8:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
			_delay_ms(300);
			PORTB |= 0x80;
 2ea:	2f 9a       	sbi	0x05, 7	; 5
 2ec:	4f ef       	ldi	r20, 0xFF	; 255
 2ee:	85 ea       	ldi	r24, 0xA5	; 165
 2f0:	9e e0       	ldi	r25, 0x0E	; 14
 2f2:	41 50       	subi	r20, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <x_stack_overflow+0x56>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <x_stack_overflow+0x60>
 2fc:	00 00       	nop
			_delay_ms(300);
			PORTB ^= 0x80;
 2fe:	85 b1       	in	r24, 0x05	; 5
 300:	80 58       	subi	r24, 0x80	; 128
 302:	85 b9       	out	0x05, r24	; 5
 304:	21 50       	subi	r18, 0x01	; 1
 306:	31 09       	sbc	r19, r1
			_delay_ms(100);
			PORTB |= 0x80;
			_delay_ms(100);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
 308:	39 f7       	brne	.-50     	; 0x2d8 <x_stack_overflow+0x3c>
 30a:	23 e0       	ldi	r18, 0x03	; 3
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	4f ef       	ldi	r20, 0xFF	; 255
 310:	81 ee       	ldi	r24, 0xE1	; 225
 312:	94 e0       	ldi	r25, 0x04	; 4
 314:	41 50       	subi	r20, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <x_stack_overflow+0x78>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <x_stack_overflow+0x82>
 31e:	00 00       	nop
			_delay_ms(300);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
			_delay_ms(100);
			PORTB |= 0x80;
 320:	2f 9a       	sbi	0x05, 7	; 5
 322:	4f ef       	ldi	r20, 0xFF	; 255
 324:	81 ee       	ldi	r24, 0xE1	; 225
 326:	94 e0       	ldi	r25, 0x04	; 4
 328:	41 50       	subi	r20, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <x_stack_overflow+0x8c>
 330:	00 c0       	rjmp	.+0      	; 0x332 <x_stack_overflow+0x96>
 332:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 0x80;
 334:	85 b1       	in	r24, 0x05	; 5
 336:	80 58       	subi	r24, 0x80	; 128
 338:	85 b9       	out	0x05, r24	; 5
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	31 09       	sbc	r19, r1
			_delay_ms(300);
			PORTB |= 0x80;
			_delay_ms(300);
			PORTB ^= 0x80;
		}
		for (int i = 0; i < 3; i++) {
 33e:	39 f7       	brne	.-50     	; 0x30e <x_stack_overflow+0x72>
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	45 ea       	ldi	r20, 0xA5	; 165
 344:	8e e0       	ldi	r24, 0x0E	; 14
 346:	21 50       	subi	r18, 0x01	; 1
 348:	40 40       	sbci	r20, 0x00	; 0
 34a:	80 40       	sbci	r24, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <x_stack_overflow+0xaa>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <x_stack_overflow+0xb4>
 350:	00 00       	nop
 352:	a5 cf       	rjmp	.-182    	; 0x29e <x_stack_overflow+0x2>

00000354 <main>:
#include "PSerial.h"
#include "acx.h"

int main(void)
{
    DDRB |= 0x80;
 354:	27 9a       	sbi	0x04, 7	; 4

    //PSerial_open(0, BAUD115200, SERIAL_8N1);

	x_init();
 356:	72 df       	rcall	.-284    	; 0x23c <x_init>
	
    while (1) {
		

		x_yield();
 358:	e5 de       	rcall	.-566    	; 0x124 <x_yield>
 35a:	85 b1       	in	r24, 0x05	; 5
		
		PORTB ^= 0x80;
 35c:	80 58       	subi	r24, 0x80	; 128
 35e:	85 b9       	out	0x05, r24	; 5
 360:	2f ef       	ldi	r18, 0xFF	; 255
 362:	89 e6       	ldi	r24, 0x69	; 105
 364:	98 e1       	ldi	r25, 0x18	; 24
 366:	21 50       	subi	r18, 0x01	; 1
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	90 40       	sbci	r25, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <main+0x12>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x1c>
 370:	00 00       	nop
 372:	f2 cf       	rjmp	.-28     	; 0x358 <main+0x4>

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>

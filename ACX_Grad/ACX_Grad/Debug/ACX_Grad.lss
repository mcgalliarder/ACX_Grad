
ACX_Grad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0000052e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000819  00800220  00800220  000005e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000658  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000176e  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4a  00000000  00000000  00001e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae7  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073d  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000997  00000000  00000000  0000421d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	e1 c1       	rjmp	.+962    	; 0x408 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e2       	ldi	r30, 0x2E	; 46
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 33       	cpi	r26, 0x39	; 57
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	f0 d1       	rcall	.+992    	; 0x500 <main>
 120:	04 c2       	rjmp	.+1032   	; 0x52a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
;------------------------------------------------------------------------
; Save thread context
;-------------------------------------------------------------------------

    ; Save registers for calling thread
	push r1 //Just in case
 124:	1f 92       	push	r1
	push r2 // Save and restore callee-save registers
 126:	2f 92       	push	r2
	push r3 // Push onto calling thread's stack
 128:	3f 92       	push	r3
	push r4
 12a:	4f 92       	push	r4
	push r5
 12c:	5f 92       	push	r5
	push r6
 12e:	6f 92       	push	r6
	push r7
 130:	7f 92       	push	r7
	push r8
 132:	8f 92       	push	r8
	push r9
 134:	9f 92       	push	r9
	push r10
 136:	af 92       	push	r10
	push r11
 138:	bf 92       	push	r11
	push r12
 13a:	cf 92       	push	r12
	push r13
 13c:	df 92       	push	r13
	push r14
 13e:	ef 92       	push	r14
	push r15
 140:	ff 92       	push	r15
	push r16
 142:	0f 93       	push	r16
	push r17
 144:	1f 93       	push	r17
	push r28
 146:	cf 93       	push	r28
	push r29
 148:	df 93       	push	r29

	; save stack pointer in appropriate array location
    ;---------------------------
;	in r24, 

 	lds r30, x_thread_id        ; get stack ID
 14a:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <x_thread_id>
 	ldi r31, 0
 14e:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30                     ; get stack control table offset
 150:	ee 0f       	add	r30, r30
 	rol r31
 152:	ff 1f       	adc	r31, r31
 	lsl r30
 154:	ee 0f       	add	r30, r30
 	rol r31
 156:	ff 1f       	adc	r31, r31
 	sbci r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 158:	e0 40       	sbci	r30, 0x00	; 0
 	sbci r31, hi8(-(stackControlTable))
 15a:	fe 4f       	sbci	r31, 0xFE	; 254

	in	r24, __SP_L__			; Put SP in r24-25
 15c:	8d b7       	in	r24, 0x3d	; 61
	in	r25, __SP_H__
 15e:	9e b7       	in	r25, 0x3e	; 62

	st	Z+,	r24					; *Z = SP 
 160:	81 93       	st	Z+, r24
	st	Z , r25
 162:	90 83       	st	Z, r25

	; Check for stack overflows
    ;---------------------------
 	
 	; int * Z = mem
	ldi r30, lo8(mem)           ; Init Z pointer to &mem
 164:	e7 e2       	ldi	r30, 0x27	; 39
 	ldi r31, hi8(mem)
 166:	f2 e0       	ldi	r31, 0x02	; 2

 	; threadID * stacksize for canary
	; int offset = x_thread_id * 256
	ldi r24, 0
 168:	80 e0       	ldi	r24, 0x00	; 0
	lds r25,	x_thread_id
 16a:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <x_thread_id>

	add r31,	r25;
 16e:	f9 0f       	add	r31, r25
	ld	r24,	Z
 170:	80 81       	ld	r24, Z

	cpi	r24,	0xAA
 172:	8a 3a       	cpi	r24, 0xAA	; 170
	breq noSOF
 174:	09 f0       	breq	.+2      	; 0x178 <x_schedule>

00000176 <SOF>:
SOF:
	; Execute if there is a stack overflow
	call x_stack_overflow
 176:	ec d0       	rcall	.+472    	; 0x350 <x_stack_overflow>

00000178 <x_schedule>:
		.global	x_schedule
x_schedule:

	; Determine next thread to run
    ;---------------------------
	lds r18, x_thread_id
 178:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <x_thread_id>
	
	lds r19, disable
 17c:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <disable>
	lds r20, suspend
 180:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <suspend>
	lds r21, delay
 184:	50 91 27 0a 	lds	r21, 0x0A27	; 0x800a27 <delay>

	or r21, r20
 188:	54 2b       	or	r21, r20
	or r21, r19
 18a:	53 2b       	or	r21, r19

0000018c <scan_begin>:

scan_begin:
	subi r18, -1			; get next thhread
 18c:	2f 5f       	subi	r18, 0xFF	; 255
	andi r18, 0x07			; mod by numthreads
 18e:	27 70       	andi	r18, 0x07	; 7

	mov r24, r18
	call bit2mask8			; get mask of bit (thread_id + 1) % numthreads
 190:	82 2f       	mov	r24, r18
 192:	27 d0       	rcall	.+78     	; 0x1e2 <bit2mask8>

	and r21, r24
 194:	58 23       	and	r21, r24
	cp r21, r24
 196:	58 17       	cp	r21, r24

	breq scan_begin
 198:	c9 f3       	breq	.-14     	; 0x18c <scan_begin>


	; Retrieve next stack pointer for next thread
    ;---------------------------
	sts x_thread_id, r18  ; should set x_thread_id to currently running thread
 19a:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <x_thread_id>
	mov r30, r18        ; get stack ID
 19e:	e2 2f       	mov	r30, r18
 	ldi r31, 0
 1a0:	f0 e0       	ldi	r31, 0x00	; 0

 	lsl r30             ; get stack control table offset
 1a2:	ee 0f       	add	r30, r30
 	rol r31
 1a4:	ff 1f       	adc	r31, r31
 	lsl r30
 1a6:	ee 0f       	add	r30, r30
 	rol r31
 1a8:	ff 1f       	adc	r31, r31
 	sbci r30, lo8(-(stackControlTable)) ; get stack pointer address from table
 1aa:	e0 40       	sbci	r30, 0x00	; 0
 	sbci r31, hi8(-(stackControlTable))
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254

	ld	r24, Z+					
 1ae:	81 91       	ld	r24, Z+
	ld	r25, Z
 1b0:	90 81       	ld	r25, Z

    ; restore new thread's stack pointer
    ;---------------------------
    cli             ; begin stack pointer change		
 1b2:	f8 94       	cli
	out __SP_L__, r24
 1b4:	8d bf       	out	0x3d, r24	; 61
	out __SP_H__, r25
 1b6:	9e bf       	out	0x3e, r25	; 62
    sei             ; end  stack pointer change
 1b8:	78 94       	sei

000001ba <restore>:
;---------------------------------------------------
restore:
 	
    ; restore new thread's registers 
    ;---------------------------
	pop r29
 1ba:	df 91       	pop	r29
	pop r28
 1bc:	cf 91       	pop	r28
	pop r17
 1be:	1f 91       	pop	r17
	pop r16
 1c0:	0f 91       	pop	r16
	pop r15
 1c2:	ff 90       	pop	r15
	pop r14
 1c4:	ef 90       	pop	r14
	pop r13
 1c6:	df 90       	pop	r13
	pop r12
 1c8:	cf 90       	pop	r12
	pop r11
 1ca:	bf 90       	pop	r11
	pop r10
 1cc:	af 90       	pop	r10
	pop r9
 1ce:	9f 90       	pop	r9
	pop r8
 1d0:	8f 90       	pop	r8
	pop r7
 1d2:	7f 90       	pop	r7
	pop r6
 1d4:	6f 90       	pop	r6
	pop r5
 1d6:	5f 90       	pop	r5
	pop r4
 1d8:	4f 90       	pop	r4
	pop r3
 1da:	3f 90       	pop	r3
	pop r2
 1dc:	2f 90       	pop	r2
	pop r1
 1de:	1f 90       	pop	r1

	ret
 1e0:	08 95       	ret

000001e2 <bit2mask8>:
//-----------------------------------------------------------------------------------------------

		.global bit2mask8
bit2mask8:
		;r24 contains thread ID input
 		subi r24, -1
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
		ldi r25, 1
 1e4:	91 e0       	ldi	r25, 0x01	; 1

000001e6 <again>:
again:

		dec r24
 1e6:	8a 95       	dec	r24
		cpi r24, 1
 1e8:	81 30       	cpi	r24, 0x01	; 1
		brlo done
		lsl r25
 1ea:	10 f0       	brcs	.+4      	; 0x1f0 <done>
		jmp again
 1ec:	99 0f       	add	r25, r25
 1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <again>

000001f0 <done>:

done:	mov r24, r25
 1f0:	89 2f       	mov	r24, r25
		ldi r25, 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
		ret
 1f4:	08 95       	ret

000001f6 <kernalInit>:
	TCCR1B |= (1 << CS10);
	TCCR1B |= (1 << CS12);

	// enable timer compare interrupt:
	TIMSK1 |= (1 << OCIE1A);
	sei();          // enable global interrupts
 1f6:	8e ef       	ldi	r24, 0xFE	; 254
 1f8:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <disable>
 1fc:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <suspend>
 200:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <delay>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	e8 5d       	subi	r30, 0xD8	; 216
 210:	f5 4f       	sbci	r31, 0xF5	; 245
 212:	11 82       	std	Z+1, r1	; 0x01
 214:	10 82       	st	Z, r1
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	88 30       	cpi	r24, 0x08	; 8
 21a:	91 05       	cpc	r25, r1
 21c:	a9 f7       	brne	.-22     	; 0x208 <kernalInit+0x12>
 21e:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <x_thread_id>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <x_thread_mask>
 228:	08 95       	ret

0000022a <placeCanaries>:
 22a:	8a ea       	ldi	r24, 0xAA	; 170
 22c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <mem>
 230:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <mem+0x100>
 234:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <mem+0x200>
 238:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <mem+0x300>
 23c:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <mem+0x400>
 240:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <mem+0x500>
 244:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <mem+0x600>
 248:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <mem+0x700>
 24c:	08 95       	ret

0000024e <x_init>:
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	00 d0       	rcall	.+0      	; 0x258 <x_init+0xa>
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	0d b7       	in	r16, 0x3d	; 61
 25e:	1e b7       	in	r17, 0x3e	; 62
 260:	f8 94       	cli
 262:	c9 df       	rcall	.-110    	; 0x1f6 <kernalInit>
 264:	e2 df       	rcall	.-60     	; 0x22a <placeCanaries>
 266:	f8 01       	movw	r30, r16
 268:	82 85       	ldd	r24, Z+10	; 0x0a
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	81 85       	ldd	r24, Z+9	; 0x09
 26e:	8a 83       	std	Y+2, r24	; 0x02
 270:	80 85       	ldd	r24, Z+8	; 0x08
 272:	8b 83       	std	Y+3, r24	; 0x03
 274:	86 e2       	ldi	r24, 0x26	; 38
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	9e bf       	out	0x3e, r25	; 62
 27a:	8d bf       	out	0x3d, r24	; 61
 27c:	ed b7       	in	r30, 0x3d	; 61
 27e:	fe b7       	in	r31, 0x3e	; 62
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	80 83       	st	Z, r24
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	df 01       	movw	r26, r30
 288:	11 97       	sbiw	r26, 0x01	; 1
 28a:	8c 93       	st	X, r24
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	32 97       	sbiw	r30, 0x02	; 2
 290:	80 83       	st	Z, r24
 292:	8d b7       	in	r24, 0x3d	; 61
 294:	9e b7       	in	r25, 0x3e	; 62
 296:	0a 97       	sbiw	r24, 0x0a	; 10
 298:	9e bf       	out	0x3e, r25	; 62
 29a:	8d bf       	out	0x3d, r24	; 61
 29c:	78 94       	sei
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <x_new>:
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <x_new+0xe>
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	18 2f       	mov	r17, r24
 2c2:	7b 01       	movw	r14, r22
 2c4:	04 2f       	mov	r16, r20
 2c6:	f8 94       	cli
 2c8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <x_thread_id>
 2cc:	8a df       	rcall	.-236    	; 0x1e2 <bit2mask8>
 2ce:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <x_thread_mask>
 2d2:	1b 82       	std	Y+3, r1	; 0x03
 2d4:	1a 82       	std	Y+2, r1	; 0x02
 2d6:	19 82       	std	Y+1, r1	; 0x01
 2d8:	fa 82       	std	Y+2, r15	; 0x02
 2da:	e9 82       	std	Y+1, r14	; 0x01
 2dc:	e1 2f       	mov	r30, r17
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	ee 0f       	add	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	bf 01       	movw	r22, r30
 2ea:	60 50       	subi	r22, 0x00	; 0
 2ec:	7e 4f       	sbci	r23, 0xFE	; 254
 2ee:	fb 01       	movw	r30, r22
 2f0:	82 81       	ldd	r24, Z+2	; 0x02
 2f2:	93 81       	ldd	r25, Z+3	; 0x03
 2f4:	29 81       	ldd	r18, Y+1	; 0x01
 2f6:	dc 01       	movw	r26, r24
 2f8:	2c 93       	st	X, r18
 2fa:	4a 81       	ldd	r20, Y+2	; 0x02
 2fc:	9c 01       	movw	r18, r24
 2fe:	21 50       	subi	r18, 0x01	; 1
 300:	31 09       	sbc	r19, r1
 302:	f9 01       	movw	r30, r18
 304:	40 83       	st	Z, r20
 306:	2b 81       	ldd	r18, Y+3	; 0x03
 308:	12 97       	sbiw	r26, 0x02	; 2
 30a:	2c 93       	st	X, r18
 30c:	46 97       	sbiw	r24, 0x16	; 22
 30e:	fb 01       	movw	r30, r22
 310:	91 83       	std	Z+1, r25	; 0x01
 312:	80 83       	st	Z, r24
 314:	80 2f       	mov	r24, r16
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <x_new+0x70>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	1a 95       	dec	r17
 320:	e2 f7       	brpl	.-8      	; 0x31a <x_new+0x6c>
 322:	00 23       	and	r16, r16
 324:	29 f0       	breq	.+10     	; 0x330 <x_new+0x82>
 326:	80 95       	com	r24
 328:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <disable>
 32c:	89 23       	and	r24, r25
 32e:	03 c0       	rjmp	.+6      	; 0x336 <x_new+0x88>
 330:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <disable>
 334:	89 2b       	or	r24, r25
 336:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <disable>
 33a:	78 94       	sei
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	08 95       	ret

00000350 <x_stack_overflow>:
 350:	27 9a       	sbi	0x04, 7	; 4
 352:	23 e0       	ldi	r18, 0x03	; 3
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	4f ef       	ldi	r20, 0xFF	; 255
 358:	81 ee       	ldi	r24, 0xE1	; 225
 35a:	94 e0       	ldi	r25, 0x04	; 4
 35c:	41 50       	subi	r20, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <x_stack_overflow+0xc>
 364:	00 c0       	rjmp	.+0      	; 0x366 <x_stack_overflow+0x16>
 366:	00 00       	nop
 368:	2f 9a       	sbi	0x05, 7	; 5
 36a:	4f ef       	ldi	r20, 0xFF	; 255
 36c:	81 ee       	ldi	r24, 0xE1	; 225
 36e:	94 e0       	ldi	r25, 0x04	; 4
 370:	41 50       	subi	r20, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <x_stack_overflow+0x20>
 378:	00 c0       	rjmp	.+0      	; 0x37a <x_stack_overflow+0x2a>
 37a:	00 00       	nop
 37c:	85 b1       	in	r24, 0x05	; 5
 37e:	80 58       	subi	r24, 0x80	; 128
 380:	85 b9       	out	0x05, r24	; 5
 382:	21 50       	subi	r18, 0x01	; 1
 384:	31 09       	sbc	r19, r1
 386:	39 f7       	brne	.-50     	; 0x356 <x_stack_overflow+0x6>
 388:	23 e0       	ldi	r18, 0x03	; 3
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	4f ef       	ldi	r20, 0xFF	; 255
 38e:	85 ea       	ldi	r24, 0xA5	; 165
 390:	9e e0       	ldi	r25, 0x0E	; 14
 392:	41 50       	subi	r20, 0x01	; 1
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <x_stack_overflow+0x42>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <x_stack_overflow+0x4c>
 39c:	00 00       	nop
 39e:	2f 9a       	sbi	0x05, 7	; 5
 3a0:	4f ef       	ldi	r20, 0xFF	; 255
 3a2:	85 ea       	ldi	r24, 0xA5	; 165
 3a4:	9e e0       	ldi	r25, 0x0E	; 14
 3a6:	41 50       	subi	r20, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <x_stack_overflow+0x56>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <x_stack_overflow+0x60>
 3b0:	00 00       	nop
 3b2:	85 b1       	in	r24, 0x05	; 5
 3b4:	80 58       	subi	r24, 0x80	; 128
 3b6:	85 b9       	out	0x05, r24	; 5
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	31 09       	sbc	r19, r1
 3bc:	39 f7       	brne	.-50     	; 0x38c <x_stack_overflow+0x3c>
 3be:	23 e0       	ldi	r18, 0x03	; 3
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	4f ef       	ldi	r20, 0xFF	; 255
 3c4:	81 ee       	ldi	r24, 0xE1	; 225
 3c6:	94 e0       	ldi	r25, 0x04	; 4
 3c8:	41 50       	subi	r20, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <x_stack_overflow+0x78>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <x_stack_overflow+0x82>
 3d2:	00 00       	nop
 3d4:	2f 9a       	sbi	0x05, 7	; 5
 3d6:	4f ef       	ldi	r20, 0xFF	; 255
 3d8:	81 ee       	ldi	r24, 0xE1	; 225
 3da:	94 e0       	ldi	r25, 0x04	; 4
 3dc:	41 50       	subi	r20, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <x_stack_overflow+0x8c>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <x_stack_overflow+0x96>
 3e6:	00 00       	nop
 3e8:	85 b1       	in	r24, 0x05	; 5
 3ea:	80 58       	subi	r24, 0x80	; 128
 3ec:	85 b9       	out	0x05, r24	; 5
 3ee:	21 50       	subi	r18, 0x01	; 1
 3f0:	31 09       	sbc	r19, r1
 3f2:	39 f7       	brne	.-50     	; 0x3c2 <x_stack_overflow+0x72>
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	45 ea       	ldi	r20, 0xA5	; 165
 3f8:	8e e0       	ldi	r24, 0x0E	; 14
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	40 40       	sbci	r20, 0x00	; 0
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <x_stack_overflow+0xaa>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	a5 cf       	rjmp	.-182    	; 0x352 <x_stack_overflow+0x2>

00000408 <__vector_17>:
}

ISR(TIMER1_COMPA_vect){
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	0b b6       	in	r0, 0x3b	; 59
 414:	0f 92       	push	r0
 416:	1f 93       	push	r17
 418:	2f 93       	push	r18
 41a:	3f 93       	push	r19
 41c:	4f 93       	push	r20
 41e:	5f 93       	push	r21
 420:	6f 93       	push	r22
 422:	7f 93       	push	r23
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
 428:	af 93       	push	r26
 42a:	bf 93       	push	r27
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
	
	x_gTime++;
 434:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
 438:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__data_end+0x1>
 43c:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <__data_end+0x2>
 440:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <__data_end+0x3>
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	a1 1d       	adc	r26, r1
 448:	b1 1d       	adc	r27, r1
 44a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
 44e:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <__data_end+0x1>
 452:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <__data_end+0x2>
 456:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <__data_end+0x3>
	
	//check x_delay_thread for every thread
	for(int i = 0; i < MAXTHREADS; i++) {
 45a:	c0 e0       	ldi	r28, 0x00	; 0
 45c:	d0 e0       	ldi	r29, 0x00	; 0
		
		// check if thread is currently delayed
		int delayStatus = bit2mask8(i) & delay; 
 45e:	8c 2f       	mov	r24, r28
 460:	c0 de       	rcall	.-640    	; 0x1e2 <bit2mask8>
		
		//if the delay status is not zero and the count isn't zero
		if (x_thread_delay[i] && delayStatus) { 
 462:	fe 01       	movw	r30, r28
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	e8 5d       	subi	r30, 0xD8	; 216
 46a:	f5 4f       	sbci	r31, 0xF5	; 245
 46c:	20 81       	ld	r18, Z
 46e:	31 81       	ldd	r19, Z+1	; 0x01
 470:	23 2b       	or	r18, r19
 472:	e9 f0       	breq	.+58     	; 0x4ae <__vector_17+0xa6>
 474:	90 91 27 0a 	lds	r25, 0x0A27	; 0x800a27 <delay>
 478:	89 23       	and	r24, r25
 47a:	c9 f0       	breq	.+50     	; 0x4ae <__vector_17+0xa6>
			
			// decrement threads count
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 47c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 47e:	f8 94       	cli
				x_thread_delay[i]--;
 480:	fe 01       	movw	r30, r28
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	e8 5d       	subi	r30, 0xD8	; 216
 488:	f5 4f       	sbci	r31, 0xF5	; 245
 48a:	80 81       	ld	r24, Z
 48c:	91 81       	ldd	r25, Z+1	; 0x01
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	91 83       	std	Z+1, r25	; 0x01
 492:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 494:	2f bf       	out	0x3f, r18	; 63
			}
			
			//if counter is now zero then clear delay bit
			if (!x_thread_delay[i])
 496:	80 81       	ld	r24, Z
 498:	91 81       	ldd	r25, Z+1	; 0x01
 49a:	89 2b       	or	r24, r25
 49c:	41 f4       	brne	.+16     	; 0x4ae <__vector_17+0xa6>
				delay &= ~(bit2mask8(i));
 49e:	8c 2f       	mov	r24, r28
 4a0:	a0 de       	rcall	.-704    	; 0x1e2 <bit2mask8>
 4a2:	80 95       	com	r24
 4a4:	90 91 27 0a 	lds	r25, 0x0A27	; 0x800a27 <delay>
 4a8:	89 23       	and	r24, r25
 4aa:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <delay>
ISR(TIMER1_COMPA_vect){
	
	x_gTime++;
	
	//check x_delay_thread for every thread
	for(int i = 0; i < MAXTHREADS; i++) {
 4ae:	21 96       	adiw	r28, 0x01	; 1
 4b0:	c8 30       	cpi	r28, 0x08	; 8
 4b2:	d1 05       	cpc	r29, r1
 4b4:	a1 f6       	brne	.-88     	; 0x45e <__vector_17+0x56>
			//if counter is now zero then clear delay bit
			if (!x_thread_delay[i])
				delay &= ~(bit2mask8(i));
		}
	}
}
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	bf 91       	pop	r27
 4c0:	af 91       	pop	r26
 4c2:	9f 91       	pop	r25
 4c4:	8f 91       	pop	r24
 4c6:	7f 91       	pop	r23
 4c8:	6f 91       	pop	r22
 4ca:	5f 91       	pop	r21
 4cc:	4f 91       	pop	r20
 4ce:	3f 91       	pop	r19
 4d0:	2f 91       	pop	r18
 4d2:	1f 91       	pop	r17
 4d4:	0f 90       	pop	r0
 4d6:	0b be       	out	0x3b, r0	; 59
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <testThread>:
	 x_yield();
   }
}

void testThread(void)
{
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	1f 92       	push	r1
 4e8:	1f 92       	push	r1
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
   volatile int i = 0;
 4ee:	1a 82       	std	Y+2, r1	; 0x02
 4f0:	19 82       	std	Y+1, r1	; 0x01
   while(1){
      i++;
 4f2:	89 81       	ldd	r24, Y+1	; 0x01
 4f4:	9a 81       	ldd	r25, Y+2	; 0x02
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	9a 83       	std	Y+2, r25	; 0x02
 4fa:	89 83       	std	Y+1, r24	; 0x01
      x_yield();
 4fc:	13 de       	rcall	.-986    	; 0x124 <x_yield>
 4fe:	f9 cf       	rjmp	.-14     	; 0x4f2 <testThread+0x10>

00000500 <main>:
void testThread(void);

int shiftCounter = 0;

int main(void)
{
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	1f 92       	push	r1
 506:	1f 92       	push	r1
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
   volatile int j = 0;
 50c:	1a 82       	std	Y+2, r1	; 0x02
 50e:	19 82       	std	Y+1, r1	; 0x01
   x_init();
 510:	9e de       	rcall	.-708    	; 0x24e <x_init>
   x_new(1, testThread, true);  // create thread, ID=1
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	61 e7       	ldi	r22, 0x71	; 113
 516:	72 e0       	ldi	r23, 0x02	; 2
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	c9 de       	rcall	.-622    	; 0x2ae <x_new>
   while(1) {
	      
   }
   */
   while(1){
	 j++;
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	9a 81       	ldd	r25, Y+2	; 0x02
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	9a 83       	std	Y+2, r25	; 0x02
	 x_yield();
 524:	89 83       	std	Y+1, r24	; 0x01
 526:	fe dd       	rcall	.-1028   	; 0x124 <x_yield>
 528:	f9 cf       	rjmp	.-14     	; 0x51c <main+0x1c>

0000052a <_exit>:
 52a:	f8 94       	cli

0000052c <__stop_program>:
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
